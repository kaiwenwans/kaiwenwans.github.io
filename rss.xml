<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[kevin wang's blog]]></title><description><![CDATA[這是凱文的部落格.]]></description><link>https://kawwenwans.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 29 Nov 2020 08:31:32 GMT</lastBuildDate><item><title><![CDATA[透過 GraphQL 在 Gatsby 中做資料撈取]]></title><description><![CDATA[本文會提到 Gatsby 的資料撈取機制 舉例說明 一個實際例子 從 第三方 API 作為資料來源產生畫面 在之前介紹 Gatsby 的文章中， 我跳過了在 Gatsby 中使用 GraphQL， 在近期修改了 Blog…]]></description><link>https://kawwenwans.github.io/learn-how-gatsby-query-data-from-graphql/</link><guid isPermaLink="false">https://kawwenwans.github.io/learn-how-gatsby-query-data-from-graphql/</guid><pubDate>Sun, 04 Oct 2020 08:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;本文會提到&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Gatsby 的資料撈取機制&lt;/li&gt;
&lt;li&gt;舉例說明&lt;/li&gt;
&lt;li&gt;一個實際例子&lt;/li&gt;
&lt;li&gt;從 第三方 API 作為資料來源產生畫面&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;在之前&lt;a href=&quot;../learn-gatsbyjs-to-start-blog-project/&quot;&gt;介紹 Gatsby 的文章中&lt;/a&gt;，&lt;br&gt;
我跳過了在 Gatsby 中使用 GraphQL，&lt;br&gt;
在近期修改了 Blog 的樣式，&lt;br&gt;
也補齊了一些之前被我跳過的知識，&lt;br&gt;
這篇文章會記錄我學習 Gatsby 中使用 GraphQL 的一些筆記。  &lt;/p&gt;
&lt;h2&gt;GraphQL 查詢互動介面&lt;/h2&gt;
&lt;p&gt;GraphQL 被整合在 Gatsby 之中作為 Data layer，&lt;br&gt;
在 Gatsby Project 資料夾下執行 &lt;strong&gt;gatsby develop&lt;/strong&gt; 或 &lt;strong&gt;gatsby build&lt;/strong&gt; 後可以在&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;http://localhost:8000/___graphql&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以互動網頁的方式查詢 GraphQL。  &lt;/p&gt;
&lt;h2&gt;從 Gatsby Hello-World Project 起手&lt;/h2&gt;
&lt;p&gt;在 terminal 下以下指令新增專案&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;從左側點選樹狀或是直接輸入底下查詢&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;query MyQuery {
  site {
    siteMetadata {
      title
      description
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;會拿到以下結果&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;site&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;siteMetadata&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;extensions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個 Query 是站台的 metadata，&lt;br&gt;
要更改 &lt;strong&gt;gatsby-config.js&lt;/strong&gt; 增加設定，&lt;br&gt;
參考以下程式碼&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  siteMetadata&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;some tile&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;    
    description&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;some description.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* Your site config here */&lt;/span&gt;
  plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新 Query 就可以拿到以下結果&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;site&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;siteMetadata&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;some tile&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;some description.&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;extensions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想要在 Gatsby 中使用這組資料，&lt;br&gt;
則必須使用 &lt;strong&gt;graphql()&lt;/strong&gt; 取得。&lt;br&gt;
參考以下程式碼&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; graphql &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;siteMetadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pageQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; graphql&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  query {
    site {
      siteMetadata {
        title
        description
      }
    }
  }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以在畫面上看到剛剛設定的 some title。&lt;/p&gt;
&lt;p&gt;其實傳進來的參數是一個物件，&lt;br&gt;
所以我們可以改寫成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;siteMetadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面這種 Query 在 Gatsby 被稱為 Page Query。&lt;br&gt;
其中 &lt;strong&gt;graphql&lt;/strong&gt; 是一種 &lt;strong&gt;tag function&lt;/strong&gt;，&lt;br&gt;
這是一種 JavaScript 的函數宣告，&lt;br&gt;
細節原理可以參考 &lt;a href=&quot;https://www.gatsbyjs.com/docs/page-query/&quot;&gt;Gatsby 官方網站&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;還有一種查詢方式稱為 &lt;strong&gt;StaticQuery&lt;/strong&gt;，&lt;br&gt;
以上面的範例來修改的話會變成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; StaticQuery&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; graphql &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;StaticQuery
      query&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;graphql&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        query {
          site {
            siteMetadata {
              title
              description
            }
          }
        }
      &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      render&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;siteMetadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這部分的文件可以參考 &lt;a href=&quot;https://www.gatsbyjs.com/docs/static-query/&quot;&gt;Gatsby 官方網站&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;實際應用的例子&lt;/h2&gt;
&lt;p&gt;如果有使用 gatsby blog starter 的話，&lt;br&gt;
就會知道頁面是放在 &lt;strong&gt;content/blog/&lt;/strong&gt; 底下，&lt;br&gt;
實際上這是透過 &lt;strong&gt;gatsby-source-filesystem&lt;/strong&gt; 這個模組定義了檔案的位置，&lt;br&gt;
再透過 &lt;strong&gt;gatsby-transformer-remark&lt;/strong&gt; 這個模組將 MD 檔案編譯成 html。&lt;br&gt;
但是在 starter 的設計中，&lt;br&gt;
會無法增加文章以外的頁面。&lt;br&gt;
這部分要改動的話，&lt;br&gt;
就要先了解 Gatsby 新增頁面的原理。   &lt;/p&gt;
&lt;h2&gt;Gatsby 是怎麼增加頁面的&lt;/h2&gt;
&lt;p&gt;在 &lt;strong&gt;gatsby-node.js&lt;/strong&gt; 中有提供許多建立頁面的 API 讓開發者可以產生出頁面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;createPages&lt;/strong&gt; 這個 API 會負責建立頁面。&lt;br&gt;
這個 API 會在資料都初始化完成後被呼叫，  &lt;/p&gt;
&lt;p&gt;而在 Gatsby Blog Starter Project 中，&lt;br&gt;
&lt;strong&gt;createPages&lt;/strong&gt; API 會與 GraphQL data layer 交互產生出頁面。&lt;/p&gt;
&lt;p&gt;在 Gatsby Blog Starter Project 中要新增一篇文章，&lt;br&gt;
必須要在 &lt;strong&gt;content/blog&lt;/strong&gt; 資料夾內產生文章的資料夾。&lt;br&gt;
如果想要增加一頁 &lt;strong&gt;about&lt;/strong&gt; 頁的時候，&lt;br&gt;
我們可以新增一個資料夾來放頁面，&lt;br&gt;
比方像是 &lt;strong&gt;content/page&lt;/strong&gt;，&lt;br&gt;
並在 &lt;strong&gt;gatsby-config.js&lt;/strong&gt; 內使用 &lt;strong&gt;gatsby-source-filesystem&lt;/strong&gt; 模組讓 Gatsby 認識 page 資料夾，&lt;br&gt;
才能在編譯的時候讓 &lt;strong&gt;gatsby-transformer-remark&lt;/strong&gt; 編譯到資料夾內的 md 檔。&lt;/p&gt;
&lt;p&gt;參考以下設定&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    {
      resolve: `gatsby-source-filesystem`,
      options: {
        path: `${__dirname}/content/page`,
        name: `assets`,
      },
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;設定完且新增完 about 後，&lt;br&gt;
就可以在新產生的靜態網頁中找到 /about/ 頁，&lt;br&gt;
但這時候 about 頁也會在部落格文章列表中。  &lt;/p&gt;
&lt;h2&gt;調整 新增頁面 GraphQL 以及查詢文章列表 GraphQL&lt;/h2&gt;
&lt;p&gt;在 Gatsby Blog Starter 的 &lt;strong&gt;gatsby-node.js&lt;/strong&gt; 中，&lt;br&gt;
可以看到 &lt;strong&gt;createPage&lt;/strong&gt; 透過 query &lt;strong&gt;allMarkdownRemark&lt;/strong&gt; 產生出文章列表的資料來產生文章相關檔案，&lt;br&gt;
並在 &lt;strong&gt;index.js&lt;/strong&gt; 內產生文章列表時透過 query &lt;strong&gt;allMarkdownRemark&lt;/strong&gt; 產生文章列表畫面，&lt;br&gt;
所以要做的調整有  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;index.js&lt;/strong&gt; 內的 query 增加 filter，&lt;/li&gt;
&lt;li&gt;新增 about 頁要用的 templete&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-node.js&lt;/strong&gt; 中的 &lt;strong&gt;createPage&lt;/strong&gt; 增加&lt;strong&gt;新增 about 頁&lt;/strong&gt;的相關邏輯&lt;/li&gt;
&lt;li&gt;預設的 Gatsby Blog Starter 有使用 &lt;strong&gt;gatsby-plugin-feed&lt;/strong&gt; 模組，這是一個產生 RSS 的模組，要調整成指定文章的內容才產生 RSS Feed。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;參考以下程式碼&lt;/p&gt;
&lt;h3&gt;query 增加 filter&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; `
  {
    allMarkdownRemark(
      sort: {fields: [frontmatter___date], order: DESC},
      filter: {fileAbsolutePath: {regex: &amp;quot;/content/blog/&amp;quot;}}
    ) {
      edges {
        node {
          fields {
            slug
          }
          frontmatter {
            title
          }
        }
      }
    }
  }
`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新增 templete 以及 CreatePage 可以參考 Starter 內現有 &lt;strong&gt;blog-post.js&lt;/strong&gt; 產生方式調整。&lt;/p&gt;
&lt;p&gt;參考以下程式碼&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;createPages&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; graphql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; actions &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;onCreateBlogPostPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;graphql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token function&quot;&gt;onCreatePagePostPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;graphql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onCreatePagePostPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;graphql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; actions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pagePostResultTask &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      {
        allMarkdownRemark(
          sort: {fields: [frontmatter___date], order: DESC},
          filter: {fileAbsolutePath: {regex: &quot;/content/page/&quot;}}
        ) {
          edges {
            node {
              fields {
                slug
              }
              frontmatter {
                title
              }
            }
          }
        }
      }
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;pagePostResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; actions

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pagePost &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;./src/templates/page-post.js&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pagePostResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;errors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; pagePostResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;errors
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;token comment&quot;&gt;// Create page posts pages.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pagePostResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;allMarkdownRemark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;edges
  
    posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;      
  
      &lt;span class=&quot;token function&quot;&gt;createPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; pagePost&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        context&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          slug&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pagePostResultTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;同場加映-在 Gatsby 中使用 第三方 API 當作來源&lt;/h2&gt;
&lt;p&gt;從上面的範例，&lt;br&gt;
我們實作了 Gatsby 在 &lt;strong&gt;gatsby-node.js&lt;/strong&gt; 透過 GraphQL 語法取得資料在編譯階段產生畫面，&lt;br&gt;
除了從 Gatsby 專案內取得資料，&lt;br&gt;
我們也可以從外部 API 取得資料，&lt;br&gt;
官方做了一個&lt;a href=&quot;https://www.gatsbyjs.com/blog/2018-10-25-using-gatsby-without-graphql/&quot;&gt;範例&lt;/a&gt;舉例如何在編譯階段使用外部 API 產生畫面。&lt;br&gt;
大致原理是在 &lt;strong&gt;createPage&lt;/strong&gt; 時呼叫 Web API，&lt;br&gt;
如果要使用 GraphQL Server 的資料當成產生畫面來源可以使用 &lt;a href=&quot;https://www.gatsbyjs.com/plugins/gatsby-source-graphql/&quot;&gt;gatsby-source-graphql&lt;/a&gt; 這個官方模組。&lt;br&gt;
透過這些設計就可以使用 WordPress 等 CMS 的資料當成資料來源在編譯階段產生畫面。&lt;/p&gt;
&lt;h2&gt;在執行階段使用 第三方 API 當作來源&lt;/h2&gt;
&lt;p&gt;從上面資料可以知道 Gatsby 提供以第三方 API 當作來源在編譯階段取得資料後產生畫面。&lt;br&gt;
如果是要一般使用者看到網頁後(執行階段)才呼叫 API 渲染畫面，&lt;br&gt;
可以考慮用 React Component 內建的 &lt;strong&gt;componentDidMount()&lt;/strong&gt; 搭配 &lt;strong&gt;setState&lt;/strong&gt; 來實作。  &lt;/p&gt;
&lt;p&gt;首先新增一個 &lt;strong&gt;time-server.js&lt;/strong&gt; 並執行  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node time-server.js  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;參考以下程式碼&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
     res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;application/json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;{&quot;time&quot;:&quot;&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&quot;}&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Node.js web server at port 5000 is running..&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加 src/components/timepage.js&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimePage&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        error&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        loading&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        items&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:5000/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                loading&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                time&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;time
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;          
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                loading&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              error
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Error&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Loading&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; TimePage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;componentdidmount()&lt;/strong&gt; 這個方法會在 DOM 被插到 DOM Tree 後被呼叫，&lt;br&gt;
文件可以參考 &lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentdidmount&quot;&gt;React 官方網站&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;修改 index.js&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; TimePage &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../components/timepage&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TimePage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;TimePage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;將 Gatsby 跑起來以後畫面上就能出現從 API 取回的最新時間了。&lt;/p&gt;
&lt;p&gt;ref:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/graphql-concepts/&quot;&gt;https://www.gatsbyjs.com/docs/graphql-concepts/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/page-query/&quot;&gt;https://www.gatsbyjs.com/docs/page-query/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/static-query/&quot;&gt;https://www.gatsbyjs.com/docs/static-query/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/graphql/&quot;&gt;https://www.gatsbyjs.com/docs/graphql/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/node-apis/&quot;&gt;https://www.gatsbyjs.com/docs/node-apis/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark&quot;&gt;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/graphql-reference/&quot;&gt;https://www.gatsbyjs.com/docs/graphql-reference/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentdidmount&quot;&gt;https://reactjs.org/docs/react-component.html#componentdidmount&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[書摘-給工程師的第一本理財書-程式金融交易的 118 個入門關鍵技巧-2]]></title><description><![CDATA[…]]></description><link>https://kawwenwans.github.io/book-digest-a-finance-beginner-book-for-software-develop-2/</link><guid isPermaLink="false">https://kawwenwans.github.io/book-digest-a-finance-beginner-book-for-software-develop-2/</guid><pubDate>Tue, 01 Sep 2020 08:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;本文會提到&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;書籍相關資訊&lt;/li&gt;
&lt;li&gt;金融商品的一些介紹&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;../book-digest-a-finance-beginner-book-for-software-develop-1&quot;&gt;上一篇&lt;/a&gt;記錄了閱讀書上介紹的金融知識以後，&lt;br&gt;
這一篇會記錄閱讀完書上介紹的金融商品類型的整理與理解。&lt;/p&gt;
&lt;h2&gt;認識股票&lt;/h2&gt;
&lt;p&gt;股票的常見金融資訊&lt;br&gt;
主要有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;財務報表
為了使上市櫃公司資訊更透明，&lt;br&gt;
法律有規定上市櫃公司必須定期更新財務報表，&lt;br&gt;
這些資訊除了在&lt;a href=&quot;https://mops.twse.com.tw/mops/web/index&quot;&gt;公開資訊觀測站&lt;/a&gt;有公布，&lt;br&gt;
通常上市櫃公司也會在自己公司的平台上揭露。  &lt;/li&gt;
&lt;li&gt;報價資訊
交易所主機每天開盤後會提供報價資訊，&lt;br&gt;
包含最佳五檔以及成交價等。
協助投資人了解市場的狀況，&lt;br&gt;
作為交易參考依據。  &lt;/li&gt;
&lt;li&gt;技術指標
透過盤中或盤後的資訊產生出來得資訊，　　
諸如K線或是 MACD 線等等，&lt;br&gt;
投資人可以透過這些技術指標產生出自己的交易策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;買賣股票的極基本知識&lt;/h2&gt;
&lt;p&gt;需要有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;證券集保戶&lt;/li&gt;
&lt;li&gt;證券交割銀行帳戶&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;搓合與交割&lt;/h2&gt;
&lt;p&gt;台灣現行的搓合方式是逐筆搓合&lt;del&gt;(我手上書的版本還是集合競價)&lt;/del&gt;&lt;br&gt;
分為市價單以及限價單兩大類，  &lt;/p&gt;
&lt;p&gt;總共有以下六種委託單:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ROC 限價當日有效&lt;/li&gt;
&lt;li&gt;IOC 限價立即成交否則取消&lt;/li&gt;
&lt;li&gt;FOK 限價全部成交否則取消&lt;/li&gt;
&lt;li&gt;ROD 市價當日有效&lt;/li&gt;
&lt;li&gt;IOC 市價立即成交否則取消&lt;/li&gt;
&lt;li&gt;FOK 市價全部成交否則取消&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;對新手來說，&lt;br&gt;
通常你只要會用 ROC 就好了。&lt;br&gt;
真的要追漲停的時候則使用 ROD。&lt;/p&gt;
&lt;p&gt;交割日的計算方式是 T+2&lt;br&gt;
意即交易日後往後的兩個正常交易日後會從交割戶頭中完成交易。  &lt;/p&gt;
&lt;h2&gt;股票放空&lt;/h2&gt;
&lt;p&gt;股票是一種現貨，&lt;br&gt;
一般來說操作上只能先買進後賣出，&lt;br&gt;
所以如果預期會下跌，&lt;br&gt;
則需要向券商借股票來賣，&lt;br&gt;
稱為融券。&lt;br&gt;
放空股票需要向券商申請信用戶，&lt;br&gt;
不建議新手嘗試。&lt;/p&gt;
&lt;h2&gt;股票當沖&lt;/h2&gt;
&lt;p&gt;前面有提到成功搓合之後會再 T+2 之後交割，&lt;br&gt;
而當日買賣平倉的動作則是當沖，&lt;br&gt;
當沖屬於信用交易，&lt;br&gt;
戶頭上就不需要有足夠的現金，&lt;br&gt;
如果是隔日沖的話交割戶頭還是要有足夠的現金。&lt;br&gt;
要注意的是隔日沖如果是先賣在買的話，&lt;br&gt;
會有額外的借券費用。&lt;br&gt;
當沖與放空一樣屬於信用操作，&lt;br&gt;
需要信用戶資格。&lt;/p&gt;
&lt;h2&gt;除權息&lt;/h2&gt;
&lt;p&gt;拆解這三個字在這個詞表示的意思:&lt;br&gt;
除: 分配&lt;br&gt;
權: 股票權利&lt;br&gt;
息: 現金股利&lt;br&gt;
部份股票每年會發放股權或股利，&lt;br&gt;
發放股權後，&lt;br&gt;
總股數會變多，&lt;br&gt;
每股股票價值會稀釋，&lt;br&gt;
而發放股利後，&lt;br&gt;
會直接扣除公司保留盈餘，&lt;br&gt;
但表股東權益減少，&lt;br&gt;
股票價值下降。&lt;/p&gt;
&lt;p&gt;在除權息日當天還持有股票則可以參加除權息，&lt;br&gt;
而在除權息之前賣出股票的行為則是棄權息。&lt;/p&gt;
&lt;h2&gt;常見的技術指標&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;簡單移動平均線-SMA
為最基本的 MA 線，&lt;br&gt;
是透過指定期間收盤價進行平均所計算出的指標，&lt;br&gt;
比方像是 5MA 指的就是5個交易日的收盤價做平均，&lt;br&gt;
然後各個點畫出一條線。  &lt;/li&gt;
&lt;li&gt;平滑移動平均線-EMA&lt;br&gt;
類似於 SMA，&lt;br&gt;
EMA是透過指數式的遞減加權方式進行移動平均，&lt;br&gt;
也就是愈接近近期的收盤價權重愈高。&lt;/li&gt;
&lt;li&gt;平均趨向指標-ADX
ADX是一種用來判斷趨勢強落的指標。&lt;/li&gt;
&lt;li&gt;指數平滑異同移動平均線-MACD&lt;br&gt;
由兩個 MA 之間的差額所算出來的線，&lt;br&gt;
分為 &lt;strong&gt;快 MA&lt;/strong&gt; 與 &lt;strong&gt;慢 MA&lt;/strong&gt; 。  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布林通道-BBAND&lt;br&gt;
是一種結合 MA 以及標準差的指標，&lt;br&gt;
由一個 MA 以及上下兩個標準差值等三條線組合起來的指標。&lt;br&gt;
這三個數值會分成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上軌: 壓力點(預期不會超過這個價格)  &lt;/li&gt;
&lt;li&gt;中軌: 市場平均價格  &lt;/li&gt;
&lt;li&gt;下軌: 支撐(預期不會低於這個價格)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;認識期貨&lt;/h2&gt;
&lt;p&gt;期貨如其英文(Features)，&lt;br&gt;
是一種遠期的合約，&lt;br&gt;
是一種在未來到期時會結算的商品(但中間是可以買賣的)，&lt;br&gt;
主要分成:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;商品期貨: 原油期貨、玉米期貨等。&lt;/li&gt;
&lt;li&gt;金融期貨: 指數期貨、匯率期貨等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;期貨與現貨的關係&lt;/h2&gt;
&lt;p&gt;現貨是期貨的標的，&lt;br&gt;
在期貨到期結算時，&lt;br&gt;
都必須回歸現貨當下的價格。  &lt;/p&gt;
&lt;h2&gt;期貨的買賣&lt;/h2&gt;
&lt;p&gt;期貨的買賣統稱為倉位，&lt;br&gt;
期貨的單位則稱為口數，&lt;br&gt;
平倉後會結算損益，&lt;br&gt;
買賣沒有順序。  &lt;/p&gt;
&lt;h2&gt;期貨的槓桿&lt;/h2&gt;
&lt;p&gt;現貨的槓桿比例是 1，&lt;br&gt;
意即必須支付成交當下的面額的金額，&lt;br&gt;
而期貨則不是，&lt;br&gt;
比方說，&lt;br&gt;
大台指一點 200 元，&lt;br&gt;
一口 10,000 點的契約價值是 2,000,000，&lt;br&gt;
而保證金需要 83,000，
換算的槓桿比例是 2,000,000 / 83,000 = 24.1，&lt;br&gt;
若是當沖交易時則可用一半的保證金進行交易，&lt;br&gt;
槓桿比例則是 48。  &lt;/p&gt;
&lt;h2&gt;保證金&lt;/h2&gt;
&lt;p&gt;分為:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始保證金:&lt;br&gt;
交易時要有的保證金。&lt;/li&gt;
&lt;li&gt;維持保證金:&lt;br&gt;
原始保證金的 75 %，&lt;br&gt;
低於這個水位需要在盤後追繳保證金，&lt;br&gt;
否則會直接平倉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果低於原始保證金的 25 % ，&lt;br&gt;
期貨商有權利將投資人的部位強制平倉，&lt;br&gt;
保障雙方不會有無法控制的損失。&lt;/p&gt;
&lt;h2&gt;遠期商品如何避險&lt;/h2&gt;
&lt;p&gt;雖然期貨也可以做買賣價差，&lt;br&gt;
但避險是期貨商品一開始產生的主因，&lt;br&gt;
假如一個商品每單位100元，&lt;br&gt;
買方怕一個月後會漲價，&lt;br&gt;
賣方怕一個月後會跌價，&lt;br&gt;
則可以簽訂一個遠期契約，&lt;br&gt;
一個月後以 100 元作為商品價格，&lt;br&gt;
若一個月後商品每單位漲價，&lt;br&gt;
則買方成功避險，&lt;br&gt;
反之則是賣方成功避險。&lt;/p&gt;
&lt;p&gt;與股票相同，&lt;br&gt;
期貨交易最終其實也是一種零和的博奕遊戲。&lt;/p&gt;
&lt;h2&gt;期貨當沖&lt;/h2&gt;
&lt;p&gt;與股票交易相同，&lt;br&gt;
就是當天要將交易部位平倉。&lt;br&gt;
上面有提到，&lt;br&gt;
期貨當沖的一個特點是保證金只需要一半，&lt;br&gt;
但是需要像期貨商申請當沖資格。&lt;/p&gt;
&lt;h2&gt;認識選擇權&lt;/h2&gt;
&lt;p&gt;在台灣，&lt;br&gt;
選擇權附署在期貨商品下，&lt;br&gt;
因此是在期貨交易所做交易。&lt;/p&gt;
&lt;p&gt;選擇權是一種契約，&lt;br&gt;
分為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;買權(Call)&lt;/li&gt;
&lt;li&gt;賣權(Put)&lt;br&gt;
這兩種權利可以買也可以賣，&lt;br&gt;
所以交易可以分為:  &lt;/li&gt;
&lt;li&gt;買買權 (Buy Call)&lt;/li&gt;
&lt;li&gt;賣買權 (Sell Call)&lt;/li&gt;
&lt;li&gt;買賣權 (Buy Put)&lt;/li&gt;
&lt;li&gt;賣賣權 (Sell Put)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以簡單理解為:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;買賣權代表合約的類型&lt;/li&gt;
&lt;li&gt;買賣方代表合約的雙方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依照標的又可以分成許多種類，&lt;br&gt;
比方像是:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;股票選擇權&lt;/li&gt;
&lt;li&gt;外幣選擇權&lt;/li&gt;
&lt;li&gt;利率選擇權&lt;/li&gt;
&lt;li&gt;股價指數選擇權&lt;/li&gt;
&lt;li&gt;期貨選擇權&lt;/li&gt;
&lt;li&gt;商品選擇權&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;選擇權的交易成本&lt;/h2&gt;
&lt;p&gt;選擇權的交易中，&lt;br&gt;
買方花錢購買一個權力，&lt;br&gt;
賣方則是賣出權力並收取買方的錢，&lt;br&gt;
買方花錢後不會承擔風險，&lt;br&gt;
而賣方賣出後，&lt;br&gt;
如果到結算日沒有超過履約價，&lt;br&gt;
則可收取買方付出的錢，&lt;br&gt;
但如果超過時，&lt;br&gt;
則必須賠償超出的部分，&lt;br&gt;
所以賣方的風險很高。  &lt;/p&gt;
&lt;h2&gt;選擇權的買方與賣方&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;買方&lt;/strong&gt; 支付權利金購買選擇權商品，&lt;br&gt;
並以現金交割，&lt;br&gt;
在結算日時決定是否履約，&lt;br&gt;
履約則代表買方獲利，&lt;br&gt;
不履約則損失權利金，&lt;/p&gt;
&lt;p&gt;所以  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選擇權買方不需要支付保證金&lt;/li&gt;
&lt;li&gt;最高投資風險是成交金額(即損失權利金)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;賣方&lt;/strong&gt;&lt;br&gt;
相對於買方支付權利金，&lt;br&gt;
賣方則必須付出保證金，&lt;br&gt;
賣方所支付的保證金是為了防止選擇權賣方可能發生損失，&lt;br&gt;
要支付給第三方單位的金額。  &lt;/p&gt;
&lt;p&gt;所以  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;賣方需要支付保證金  &lt;/li&gt;
&lt;li&gt;最高投資風險沒有上限(超過履約價的部分都必須支付)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保證金的公式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;保證金 = 權利金價值 + Max(風險值-價外值,最小值)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中，&lt;br&gt;
風險值與最小值是依照&lt;a href=&quot;https://www.taifex.com.tw/cht/5/margingReqSSO&quot;&gt;期交所的標準計算&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;看起來人人當買方就好了，&lt;br&gt;
但實際上賣方的風險比較高，&lt;br&gt;
所以賣方會傾向更高的成交價來交易，&lt;br&gt;
所以買方一開始就要付出較高的金額來買權利金。&lt;br&gt;
說到底還是看投資者的判斷是否精準。  &lt;/p&gt;
&lt;h2&gt;選擇權的價位&lt;/h2&gt;
&lt;p&gt;分為:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;價內(In The Money)
以買權來說:&lt;br&gt;
履約價低於標義務市價，&lt;br&gt;
代表價內。&lt;br&gt;
以賣權來說:&lt;br&gt;
當履約價高於標的物市價時，&lt;br&gt;
代表價內。&lt;br&gt;
價內代表 &lt;strong&gt;此履約價是有價值的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;價平(At The Money)
當標的物市價為履約價則為價平。  &lt;/li&gt;
&lt;li&gt;價外(Out The Money)
履約價在標的物價格外，&lt;br&gt;
代表 &lt;strong&gt;此履約價沒有價值&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;選擇權與標的之恆等公式&lt;/h2&gt;
&lt;p&gt;又稱為 &lt;strong&gt;買權/賣權平價理論(put-call-parity)&lt;/strong&gt;，&lt;br&gt;
是指買權賣權以及標的物三種價格之間的均衡關係，&lt;br&gt;
若價格背離平價理論，&lt;br&gt;
中間就存在套利機會。  &lt;/p&gt;
&lt;p&gt;以台指選擇權與台指小台期貨來說，&lt;br&gt;
平價公式為:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;履約價 A 買入一口小台=買入(履約價 A 的買權)且賣出(履約價 A 的賣權)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;賣一口小台，買進A履約價買權、賣出A履約價賣權&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;履約價A賣出一口小台=買入(履約價 A 的賣權)且賣出(履約價 A 的買權)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;買一口小台，賣出A履約價買權、買進A履約價賣權&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;認識外匯&lt;/h2&gt;
&lt;p&gt;分為:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;外匯現貨&lt;br&gt;
在銀行用台幣換外幣或是用外幣換台幣就是外匯現貨的交易。&lt;br&gt;
具有以下特性:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;波動較低  &lt;/li&gt;
&lt;li&gt;排除借錢的情況無法槓桿  &lt;/li&gt;
&lt;li&gt;只能先買後賣進行價差獲利  &lt;/li&gt;
&lt;li&gt;可以取得實體商品(實體外幣)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;買賣外幣本身沒有手續費，&lt;br&gt;
銀行會在買賣之間存在價差進行獲利。&lt;br&gt;
買賣價格的定義如下:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;銀行買價=交易者的賣出價&lt;/li&gt;
&lt;li&gt;銀行賣價=交易者的買進價&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外匯期貨&lt;br&gt;
是外匯現貨的遠期契約，並非實體商品。&lt;br&gt;
到期後連動的是外幣現貨的價格。&lt;br&gt;
買賣外匯期貨是一種單純的金融商品交易，&lt;br&gt;
投資人會透過外匯期貨進行價差套利，&lt;br&gt;
而並非真正需要使用外幣。  &lt;/p&gt;
&lt;p&gt;外匯期貨與外匯期貨不同的地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由期交所發布&lt;/li&gt;
&lt;li&gt;透過券商購買而非銀行&lt;/li&gt;
&lt;li&gt;交易成本是手續費而不是買賣價差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外匯保證金&lt;br&gt;
是一種槓桿交易，&lt;br&gt;
交易方式會因為銀行或券商而不同，&lt;br&gt;
有些是融資讓客戶進行外匯交易，&lt;br&gt;
有些則是透過保證金方式進行交易。&lt;/p&gt;
&lt;p&gt;不同於外匯現貨，&lt;br&gt;
外匯保證金可以先賣再買作價差。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[書摘-給工程師的第一本理財書-程式金融交易的 118 個入門關鍵技巧-1]]></title><description><![CDATA[本文會提到 書籍相關資訊 書上提及的金融投資知識與心法 書籍資訊 作者: 酆士昌 出版社:博碩文化股份有限公司 ISBN:9789864343041 Google Play Store…]]></description><link>https://kawwenwans.github.io/book-digest-a-finance-beginner-book-for-software-develop-1/</link><guid isPermaLink="false">https://kawwenwans.github.io/book-digest-a-finance-beginner-book-for-software-develop-1/</guid><pubDate>Sun, 30 Aug 2020 08:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;本文會提到&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;書籍相關資訊&lt;/li&gt;
&lt;li&gt;書上提及的金融投資知識與心法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;書籍資訊&lt;/h2&gt;
&lt;p&gt;作者: 酆士昌&lt;br&gt;
出版社:博碩文化股份有限公司&lt;br&gt;
ISBN:9789864343041&lt;br&gt;
&lt;a href=&quot;https://play.google.com/store/books/details/%E9%85%86%E5%A3%AB%E6%98%8C_%E7%B5%A6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E7%90%86%E8%B2%A1%E6%9B%B8_%E7%A8%8B%E5%BC%8F%E9%87%91%E8%9E%8D%E4%BA%A4%E6%98%93%E7%9A%84118%E5%80%8B%E5%85%A5%E9%96%80%E9%97%9C%E9%8D%B5%E6%8A%80%E5%B7%A7?id=fdB1DwAAQBAJ&quot;&gt;Google Play Store 電子書連結&lt;/a&gt;&lt;br&gt;
實體書可在各大實體通路或是網路通路取得  &lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這是一本放在我書架上一年的書，&lt;br&gt;
我斷斷續續的有在閱讀，&lt;br&gt;
但進度非常緩慢XD，&lt;br&gt;
總結來說這本書對於想了解金融相關知識的軟體開發者來說是相當不錯的，&lt;br&gt;
除了金融知識的補充之外，&lt;br&gt;
介紹一些金融指標時還會實際帶讀者透過程式抓取金融指標，&lt;br&gt;
也有花一些篇幅來介紹 Python 以及 R 的基本語法，&lt;br&gt;
不過對於金融以及 Python 和 R 都不太熟的我其實讀起來很緩慢，&lt;br&gt;
所以後來我在閱讀時是分開閱讀的，&lt;br&gt;
&lt;del&gt;有一點我很想吐槽的是其實這本書在介紹這些知識時很零散…，&lt;/del&gt;&lt;br&gt;
&lt;del&gt;一下股票一下期貨一下外匯的..，&lt;/del&gt;&lt;br&gt;
&lt;del&gt;算是我覺得這本書有點美中不足的地方，&lt;/del&gt;&lt;br&gt;
先讀金融知識的部分補齊知識，&lt;br&gt;
再回頭做書上程式交易的實作。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;投資與理財&lt;/h2&gt;
&lt;p&gt;投資理財常常被提再一起，&lt;br&gt;
實際上細分這兩個詞彙，&lt;br&gt;
投資是理財的一部分，&lt;br&gt;
生活上常常碰到的比價，&lt;br&gt;
也是理財的一部分。&lt;/p&gt;
&lt;h2&gt;投資以外的理財方式&lt;/h2&gt;
&lt;p&gt;理財通常分為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;節流&lt;br&gt;
透過記帳等方式來分析自己的消費習慣，&lt;br&gt;
並調整消費支出使金錢的使用上更有效率。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開源
著重於創造收入，&lt;br&gt;
相較於投資以外的開源，&lt;br&gt;
比較常見的有:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工作收入&lt;br&gt;
一份工作會提供你穩定&lt;del&gt;(通常來說)&lt;/del&gt;的收入，&lt;br&gt;
透過從工作中學習經驗以及自身持續的進修提高自己的工作能力，&lt;br&gt;
進而透過升遷、加薪或是轉換跑道等方式得到更多收入。&lt;br&gt;
一個常見誤區是許多人透過增加兼職的方式看起來增加了收入，&lt;br&gt;
但卻擠壓了主要職能的進修，&lt;br&gt;
這部分就要自己斟酌。&lt;/li&gt;
&lt;li&gt;人脈&lt;br&gt;
人脈是一種不會立即得到收益，卻可能在日後得到專業甚至資金上的互相協助，&lt;br&gt;
或是重要業界訊息的管道之一。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;交易所與券商&lt;/h2&gt;
&lt;p&gt;交易所主要提供以下的功能:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供一個有組織及秩序的交易場所，保證交易在公平公正公開的原則下進行交易。  &lt;/li&gt;
&lt;li&gt;提供公開的交易價格。  &lt;/li&gt;
&lt;li&gt;提供相同的交易規則與標準。  &lt;/li&gt;
&lt;li&gt;提供良好的交易環境與服務。  &lt;/li&gt;
&lt;li&gt;提供交易擔保，使交易更為安全。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般來說鄭福經營的金融商品交易所，&lt;br&gt;
都是透過券商作為中介單位。&lt;br&gt;
投資者必須到券商開戶，&lt;br&gt;
才能進行下單交易。&lt;br&gt;
券商會向投資者收取商品金額以及手續費(部分商品是保證金)，&lt;br&gt;
再到交易所進行搓合，&lt;br&gt;
並做最後的結算。&lt;/p&gt;
&lt;p&gt;台灣三大金融商品的交易所為&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;證交所
主要產品為集中交易市場上的有價證券，&lt;br&gt;
包括:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;股票&lt;/li&gt;
&lt;li&gt;債權換股權利證書&lt;/li&gt;
&lt;li&gt;可轉換公司債&lt;/li&gt;
&lt;li&gt;受益憑證&lt;/li&gt;
&lt;li&gt;認購(售)權證&lt;/li&gt;
&lt;li&gt;ETF&lt;/li&gt;
&lt;li&gt;台灣存託憑證&lt;/li&gt;
&lt;li&gt;受益證券&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除此之外也自行編製了許多指標，&lt;br&gt;
像是大家耳熟能詳的 &lt;strong&gt;台灣50指數&lt;/strong&gt; 等，
詳細的資料可以參考 &lt;a href=&quot;https://www.twse.com.tw/zh/page/products/indices/series.html&quot;&gt;證交所網站&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;期交所
主要提供期貨商品的交易&lt;/li&gt;
&lt;li&gt;櫃買中心
又稱為店頭市場，&lt;br&gt;
主要都是上櫃股票，&lt;br&gt;
書上沒提到的是其實櫃買市場也是可以買黃金的。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;投資常見的陷阱與誤區&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;出金風險&lt;br&gt;
出金指的是資金從交易帳戶轉回一般帳戶，&lt;br&gt;
國內的投資商在政府法規的規範下，&lt;br&gt;
不會碰到出金問題，&lt;br&gt;
這部比較容易發生在使用境外的投資單位，&lt;br&gt;
由於不容易受到政府法規規範，&lt;br&gt;
在使用境外投資單位上就要比較注意。  &lt;/li&gt;
&lt;li&gt;本金虧損
不少金融商品標榜的是可以穩定收益，&lt;br&gt;
定期拿回利息，&lt;br&gt;
相信大家在電視廣告或是公車廣告都看過，&lt;br&gt;
但是通常都會有一行小小的字，&lt;br&gt;
比方像是 &lt;strong&gt;本基金之配息來源可能為本金&lt;/strong&gt;，&lt;br&gt;
在考量投資金融商品的時候要特別注意這類風險。&lt;/li&gt;
&lt;li&gt;交易規則
不少投資新手甚至是坊間的 &lt;strong&gt;投資老師&lt;/strong&gt; 喜歡用自己以為的交易規則來做金融商品買賣，&lt;br&gt;
不只這本書提到，&lt;br&gt;
我也常跟身邊的朋友提過，&lt;br&gt;
在進行交易的時候一定要特別注意，&lt;br&gt;
&lt;strong&gt;只買自己了解規則的商品!&lt;/strong&gt;&lt;br&gt;
近期經典例子就是 2020 年的 COVID-19 導致油價崩盤，&lt;br&gt;
有些出書的投資老師就在鼓吹買石油期貨甚至是買 &lt;strong&gt;全世界唯一追蹤石油正2指數&lt;/strong&gt; 的台灣某 ETF ，&lt;br&gt;
在 2020 年 6 月持有石油正向商品的投資者應該都嚇壞了，&lt;br&gt;
大概這輩子沒想過期貨可以是負價格的..XD。&lt;br&gt;
這就是不懂交易規則下，&lt;br&gt;
僅憑自己認知的&lt;strong&gt;總不會有負油價&lt;/strong&gt;所產生的盲點。  &lt;/li&gt;
&lt;li&gt;資訊不對稱&lt;br&gt;
一般投資人稱為散戶，&lt;br&gt;
相對於法人，&lt;br&gt;
除去內線交易等不合法的操作手法，&lt;br&gt;
法人的資金通常比較充足，&lt;br&gt;
比較容易藉著價格波動影響市場，&lt;br&gt;
進而影響資金較少的投資者，&lt;br&gt;
從而獲利。&lt;br&gt;
除此之外，&lt;br&gt;
像是一些來自彭博的資料其實都動輒十幾萬台幣，&lt;br&gt;
一般散戶是不會去買的，&lt;br&gt;
這部分也會照成資訊上的落差。  &lt;/li&gt;
&lt;li&gt;貸款融資
投資是具有風險性的行為，&lt;br&gt;
說的通俗一點就是沒有在包贏的。&lt;br&gt;
投資新手都應該以閒錢作為初期的資金來源&lt;/li&gt;
&lt;li&gt;以小博大
其實就是槓桿行為，&lt;br&gt;
用較少的資金去交易金額較高的商品，&lt;br&gt;
像是台指期或是外匯保證金之類的，&lt;br&gt;
更大槓桿的像是比特幣期貨，&lt;br&gt;
除非已經是投資好幾年了也很有把握，&lt;br&gt;
不然真的不是很建議，&lt;br&gt;
在正常的交易中，&lt;br&gt;
風險與獲利是等價的，&lt;br&gt;
高獲利的商品也會帶著高風險，&lt;br&gt;
如果高獲利卻沒有風險，&lt;br&gt;
通常是騙你的，&lt;br&gt;
或是可惡一點像是次貸風暴把風險轉嫁給別人。&lt;/li&gt;
&lt;li&gt;單邊重押
對投資初學者來說，&lt;br&gt;
單邊重押是非常不好的，&lt;br&gt;
押對了可以最大化收益，&lt;br&gt;
押錯了且押過高的財產比例，&lt;br&gt;
就會發生賭神系列電影台詞「一把回老家」，&lt;br&gt;
一定會有人反駁說，&lt;br&gt;
可是有些資深的投資者都一次押很多，&lt;br&gt;
我只能說通常這種積極的投資者都會放避險部位，&lt;br&gt;
只是他沒有跟你說而已。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;凹單
一個正常的交易，&lt;br&gt;
我認為應該要在交易前就想好以下幾點:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;進場價格&lt;/li&gt;
&lt;li&gt;止盈點&lt;/li&gt;
&lt;li&gt;止損點&lt;/li&gt;
&lt;li&gt;持有理由&lt;br&gt;
達到進場價格以及符合持有理由時就買進，&lt;br&gt;
並在碰到止損點或是止盈點或是不再有持有理由時賣出。&lt;br&gt;
不要再達到止損點且沒有持有理由時不願賣出，&lt;br&gt;
嚴守紀律其實對初學投資者不容易，&lt;br&gt;
程式交易的一個好處是可以徹底執行原則。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;避開特例&lt;br&gt;
在市場上發生特殊事件時，&lt;br&gt;
自己無法預期時不如先退場觀察，&lt;br&gt;
套用個人名言: &lt;strong&gt;看不懂你就不要買&lt;/strong&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;認識自己的風險承受能力&lt;/h2&gt;
&lt;p&gt;在購買一些金融商品時，&lt;br&gt;
商品都會標示 PR，&lt;br&gt;
這個就是 &lt;strong&gt;風險報酬等級&lt;/strong&gt;，&lt;br&gt;
PR5 是高風險高報酬，&lt;br&gt;
PR1 則是相反，&lt;br&gt;
在申購部分商品時會要求做風險評估確保投資人知道其風險。  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;常見的投資商品&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;存款&lt;br&gt;
目前台灣的銀行存款皆有 300 萬的存款保險，&lt;br&gt;
基本上是無風險的投資方式，&lt;br&gt;
搭配現在流行的高利活存或是定存，&lt;br&gt;
一年大概會有 1 %- 2 %的收益。&lt;/li&gt;
&lt;li&gt;股票&lt;br&gt;
持有股票成為公司的股東，&lt;br&gt;
只要公司沒有倒閉股票便有價值，&lt;br&gt;
價值會因公司本身營運所備估計的市值以及市場交易而有波動，&lt;br&gt;
屬於風險資產。  &lt;/li&gt;
&lt;li&gt;期貨&lt;br&gt;
期貨是一種有期限的商品，&lt;br&gt;
意即在一個時間區間內，&lt;br&gt;
買賣雙方以一個同意的 &lt;strong&gt;履約價格&lt;/strong&gt; 來約定未來的某個時候，&lt;br&gt;
合約上的商品要以履約價格做買賣。&lt;br&gt;
通常來說只要有保證金就能做交易了。&lt;br&gt;
而保證金一但低於規定的水位，&lt;br&gt;
就會被券商強制平倉，&lt;br&gt;
屬於波動比股票大的風險資產。&lt;br&gt;
通常會拿來做避險部位，&lt;br&gt;
也是有比較積極的投資人透過其可槓桿的特性，&lt;br&gt;
用較小資金部位來獲得較大的收益。  &lt;/li&gt;
&lt;li&gt;選擇權&lt;br&gt;
如同字面上的意思，&lt;br&gt;
選擇權是一種權力上的買賣，&lt;br&gt;
是一份未來合約。  &lt;/li&gt;
&lt;li&gt;基金&lt;br&gt;
由特定公司發行的金融商品，&lt;br&gt;
讓投資者投入資金，&lt;br&gt;
並由專業投資人做投資，&lt;br&gt;
風險來自於基金公司的操作是否符合預定的報酬率。&lt;br&gt;
&lt;del&gt;其實很多基金績效都打不過大盤，所以我情願買大盤指數型的ETF XD&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;黃金&lt;br&gt;
黃金是一種保值的貴金屬，&lt;br&gt;
交易方式有:&lt;/li&gt;
&lt;li&gt;黃金存摺&lt;/li&gt;
&lt;li&gt;櫃買市場&lt;/li&gt;
&lt;li&gt;銀樓&lt;/li&gt;
&lt;li&gt;黃金 ETF&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;黃金是一種大致上跟大盤表現相反的商品，&lt;br&gt;
一般來說總體經濟表現好的時候，&lt;br&gt;
市場資金會傾向流向股市以及新興債等收益較高的資產，&lt;br&gt;
反之會買黃金作為避險，&lt;br&gt;
但這不是絕對的，&lt;br&gt;
以 2020 年 COVID-19 的公衛事件來說，&lt;br&gt;
黃金在股市暴跌漲了一段以後也跟著暴跌，&lt;br&gt;
原因是近年流行的股債平衡操作，&lt;br&gt;
當所以資產都跌的時候投資者需要現金來付追繳金(補倉)，&lt;br&gt;
這時就需要變賣其他資產來做再平衡。  &lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;外匯&lt;br&gt;
各國貨幣存在不同的匯率，&lt;br&gt;
而不同的匯率也能視為一種金融商品，&lt;br&gt;
匯率是無時不刻在變化的，&lt;br&gt;
外匯交易主要賺的是匯差，&lt;br&gt;
一般在銀行的外匯交易是比較小的交易，&lt;br&gt;
外匯保證金則是比較積極的投資人會接觸的，&lt;br&gt;
與期貨交易類似，&lt;br&gt;
是採用用保證金交易的。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;一些投資手法名詞解釋&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對沖&lt;br&gt;
舉例來說，&lt;br&gt;
期貨類商品有不同到期日(近月與遠月)，&lt;br&gt;
如果近月看漲，&lt;br&gt;
則可以買近月商品，&lt;br&gt;
如果再放空遠月商品時，&lt;br&gt;
則是一種對沖。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避險&lt;br&gt;
避險是一種避免操作方向錯誤導致巨額虧損的方法。&lt;br&gt;
通常市場上常見的避免手法即是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;買屬性相反的同類商品  &lt;/li&gt;
&lt;li&gt;遠期商品做反向  &lt;/li&gt;
&lt;li&gt;選擇權做反向  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;避險在降低風險的同時，&lt;br&gt;
一部分也降低的獲利，&lt;br&gt;
也需要較高的交易成本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;../book-digest-a-finance-beginner-book-for-software-develop-2&quot;&gt;下一篇&lt;/a&gt;會紀錄讀完書上介紹的金融商品後的理解與整理&lt;/p&gt;</content:encoded></item><item><title><![CDATA[透過 GitHub Action 將 Gatsby 部署到 GitHub Page]]></title><description><![CDATA[本文會提到 設定 GitHub Action   透過 GitHub Action 發佈 Gatsby Project 到 GitHub Page   GitHub Action 的計費方式 前言 在 GitHub Action 推出前， GitHub 最常搭配的 CI…]]></description><link>https://kawwenwans.github.io/deploy-gatsby-by-github-action/</link><guid isPermaLink="false">https://kawwenwans.github.io/deploy-gatsby-by-github-action/</guid><pubDate>Sun, 23 Aug 2020 08:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;本文會提到&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;設定 GitHub Action  &lt;/li&gt;
&lt;li&gt;透過 GitHub Action 發佈 Gatsby Project 到 GitHub Page  &lt;/li&gt;
&lt;li&gt;GitHub Action 的計費方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在 GitHub Action 推出前，&lt;br&gt;
GitHub 最常搭配的 CI 服務應該是 Travis CI，&lt;br&gt;
相信大家有在 GitHub 看開源專案的時候，&lt;br&gt;
看過有些 readme 上的 &lt;strong&gt;build pass&lt;/strong&gt; 小貼紙，&lt;br&gt;
通常都是 Travis CI 的。
在近期的 GitHub + Travis CI 實際串接的爬文過程中，&lt;br&gt;
發現 GitHub Action 比剛出的時候似乎改了不少，&lt;br&gt;
想想編譯部落格不太需要繞一圈去搭配一個額外的 CI/CD 服務，&lt;br&gt;
所以決定試試實際串接 GitHub Action。  &lt;/p&gt;
&lt;h2&gt;前置準備&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一個 GitHub 帳號  &lt;/li&gt;
&lt;li&gt;一個在 GitHub 上要佈署的專案  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下來是確認 &lt;a href=&quot;https://github.com/features/actions#pricing-details&quot;&gt;Pricing&lt;/a&gt;，&lt;br&gt;
目前 GitHub Action 很佛心的提供 Open Source Project 的免費使用，&lt;br&gt;
更佛心的點是相比 Travis CI，&lt;br&gt;
GitHub Action Free Plan 直接提供了每個月 2000 分鐘的使用時間，&lt;br&gt;
還提供了 GitHub Action Marketplace，&lt;br&gt;
可以方便套用別人寫好的 GitHub Action。&lt;/p&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;h3&gt;新增 perrsonal sccess token&lt;/h3&gt;
&lt;p&gt;首先要新增 perrsonal sccess token，&lt;br&gt;
到 GitHub 的 Settings/Developer/settings/Personal access tokens 下產生一組新的token，&lt;br&gt;
Note 打一組自己會記得的，&lt;br&gt;
如果是 Public Repo 的話選 &lt;strong&gt;public_repo&lt;/strong&gt;，&lt;br&gt;
如果是 Private Repo 的話要選整個 Repo 權限，&lt;br&gt;
記得產生完要記錄起來。  &lt;/p&gt;
&lt;h3&gt;設定 Secrets&lt;/h3&gt;
&lt;p&gt;到要自動發佈 GitHub Repo的 Settings/Secrets 新增一組 New Secret:  &lt;/p&gt;
&lt;p&gt;Name:打自己看得懂意思的就好，等等會用到&lt;br&gt;
Value:要填上剛剛產生的token  &lt;/p&gt;
&lt;h2&gt;新增Action&lt;/h2&gt;
&lt;p&gt;接著到 GitHub 要發佈 Repo 的 Action 頁，&lt;br&gt;
這裡我選擇套用&lt;a href=&quot;https://github.com/peaceiris/actions-gh-pages&quot;&gt;寫好的GitHub Action&lt;/a&gt;試試效果。&lt;/p&gt;
&lt;p&gt;首先要先建立一個 .yml 檔案，&lt;br&gt;
根據 &lt;a href=&quot;https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file&quot;&gt;文件&lt;/a&gt; 要放在以下位置&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.
└── .github
    ├── workflows
    └── your-workflow.yml(.yaml 也可以)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;參考以下設定&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Gatsby Publish
&lt;span class=&quot;token comment&quot;&gt;# 在 master 有 push 時觸發動作&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; master

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 這個是 job_id&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;token comment&quot;&gt;# 指定這個 job 要跑在什麼環境上 要注意 GitHub Runner 每次都會是乾淨環境&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# 可以指定 self-hosted runner 然後宣告成 &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# [self-hosted, windows/linux/macOS,x86/x64/ARM/ARM64]&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest 
    &lt;span class=&quot;token comment&quot;&gt;# 每個 job 會有很多的任務，這些任務集合叫做 steps，會依序執行&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;token comment&quot;&gt;# uses 代表套用現成的action&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2 
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; peaceiris/actions&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages@v3
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;personal_token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.剛剛設定的SecretName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 發佈到 GitHub Page 所在 Repo &lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;external_repository&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;.github.io           
          &lt;span class=&quot;token key atrule&quot;&gt;publish_branch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; master
          &lt;span class=&quot;token key atrule&quot;&gt;publish_dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./public&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;都設定正確的話，&lt;br&gt;
當 master 有新的 push 的時候，&lt;br&gt;
就會自動執行設定好的 GitHub Action，&lt;br&gt;
live log 可以在 Repo 下的 Actions 看當次 Workflow 的執行紀錄，&lt;br&gt;
可以很方便看 Workflow 內每個 Actions 的執行時間，&lt;br&gt;
以及當發生錯誤時是哪個環節出錯，&lt;br&gt;
這樣一來就可以完成 push 到 master 後自動部署任務了。  &lt;/p&gt;
&lt;h2&gt;GitHub Action Billing 計算方式&lt;/h2&gt;
&lt;p&gt;前面有提到，&lt;br&gt;
如果是 Private Repo 的話執行 GitHub Action 要付費，&lt;br&gt;
但是 GitHub 有提供免費額度，&lt;br&gt;
實際使用與剩餘時間是放在 &lt;a href=&quot;https://github.com/settings/billing&quot;&gt;帳單頁&lt;/a&gt;，&lt;br&gt;
在實際串接 GitHub Action 中我並沒有很順利一次串接成功，&lt;br&gt;
比對了一下實際使用時間，&lt;br&gt;
以及以我串接的紀錄來說:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#4 1m43s
#3 17s
#2 17s
#1 22s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這樣總時數是 2m39s，&lt;br&gt;
而實際帳單是 5 of 2000 min included ，&lt;br&gt;
推測起來 GitHub Action 實際計算方式是一個 Action 最小執行時間單位為一分鐘，&lt;br&gt;
所以算成 4m43，&lt;br&gt;
在帳單頁直接顯示成 5m，&lt;br&gt;
以上是依照結果推測。&lt;/p&gt;
&lt;h2&gt;Job 平行處理與控制&lt;/h2&gt;
&lt;p&gt;在這次的實作中其實只使用了一個 job 來完成整個部署，&lt;br&gt;
沒有將 CI 與 CD 拆分，&lt;br&gt;
更沒有程式碼的測試案例，&lt;br&gt;
但其實在實際軟體開發流程中有些情況下會碰到一次部署需要執行多個任務，&lt;br&gt;
比方像是跑單元測試跟原始碼品質檢查等等，&lt;br&gt;
GitHub Action 有支援平行處理 job，&lt;br&gt;
並且可以透過簡單的語法來控制流程，&lt;br&gt;
比方像是:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;job1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;job2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;    
  &lt;span class=&quot;token key atrule&quot;&gt;job3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;job1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; job2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;job4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;job3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;透過 &lt;strong&gt;needs&lt;/strong&gt; 語法就能很好的控制 task 之間的相依性。  &lt;/p&gt;
&lt;p&gt;ref:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;https://docs.github.com/en/actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions&quot;&gt;https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/actions/starter-workflows/tree/master&quot;&gt;https://github.com/actions/starter-workflows/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jiaming0708.github.io/2020/05/21/github-action-and-package/&quot;&gt;https://jiaming0708.github.io/2020/05/21/github-action-and-package/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[部署 Gatsby 專案到 Github Page]]></title><description><![CDATA[本文會提到 套用現成 Blog 樣板 部署到 Github-page 透過 travis-ci 自動部署 套用 Blog Starter Gatsby.js 有很多現成的 blog starter， 有些 Starter 真的很不錯， 但我還是決定用官方的 blog…]]></description><link>https://kawwenwans.github.io/deploy-gatsby-blog-note/</link><guid isPermaLink="false">https://kawwenwans.github.io/deploy-gatsby-blog-note/</guid><pubDate>Sat, 22 Aug 2020 08:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;本文會提到&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;套用現成 Blog 樣板&lt;/li&gt;
&lt;li&gt;部署到 Github-page&lt;/li&gt;
&lt;li&gt;透過 travis-ci 自動部署&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;套用 Blog Starter&lt;/h2&gt;
&lt;p&gt;Gatsby.js 有很多現成的 blog starter，&lt;br&gt;
有些 Starter 真的很不錯，&lt;br&gt;
但我還是決定用官方的 blog-starter 起手，&lt;br&gt;
再依需求改部落格。  &lt;/p&gt;
&lt;p&gt;一樣從 &lt;strong&gt;gatsby new&lt;/strong&gt; 起手&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby new my-blog-starter https://github.com/gatsbyjs/gatsby-starter-blog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先要調整 &lt;strong&gt;gatsby-config.js&lt;/strong&gt; 內的樣版內容，&lt;br&gt;
如果像我一樣移除掉 twitter 的話，&lt;br&gt;
照著錯誤訊息將剩餘有引用到的地方一併移除即可，&lt;br&gt;
要改的檔案分別是&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.
└── src
    ├── bio.js
    └── seo.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文章都會放在 &lt;strong&gt;blog&lt;/strong&gt; 資料夾，&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.
└── content
    └── blog
        └── 你文章的網址
            └── index.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h2&gt;部署網站&lt;/h2&gt;
&lt;p&gt;gatsb y產生的是靜態網站，&lt;br&gt;
只需要 host 可以提供靜態網頁瀏覽的功能就可以了，&lt;br&gt;
我選擇使用 Github Page 來 host 部落格。&lt;/p&gt;
&lt;p&gt;首先專案安裝 &lt;strong&gt;gh-pages&lt;/strong&gt; 套件來產生發佈頁&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install gh-pages --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並新增一個指令&lt;br&gt;
&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Github 也要設定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Github 上建立一個用來發佈用到的 repo，&lt;/li&gt;
&lt;li&gt;到 setting 設定一個並選擇一個分支作為 source(通常選 master)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我是多開一個 &lt;strong&gt;develop&lt;/strong&gt; 分支來放我的部落格原始碼。&lt;/p&gt;
&lt;p&gt;如果建立的repo是 &lt;strong&gt;{username}.github.io&lt;/strong&gt; 這樣的命名規範，&lt;br&gt;
就可以直接發佈了，&lt;br&gt;
但如果不是使用 &lt;strong&gt;{username}.github.io&lt;/strong&gt; 這樣的命名規範，&lt;br&gt;
則需要在多增加以下設定  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;module.exports = &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  pathPrefix&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/reponame&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後執行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm run deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這樣我們就可以在 &lt;strong&gt;{username}.github.io&lt;/strong&gt; 看到部署好的網站了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;gh-page 與 Gatsby 專案 分離&lt;/h2&gt;
&lt;p&gt;按照上述過程已經可以產生出一個靜態網站了，&lt;br&gt;
但是這樣我們會直接 deploy 在當前repo的 master 分支，&lt;br&gt;
接下來會實作 blog source 跟 Github page 的 repo拆開。  &lt;/p&gt;
&lt;p&gt;從上述過程我們已經知道其實部署是依靠以下指令。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其實稍微改一下部署指令就能做到 gh-page 以及實際 Gatsby 專案分離，  &lt;/p&gt;
&lt;p&gt;首先增加一個 &lt;strong&gt;deploy-ghpage.js&lt;/strong&gt; 在根目錄&lt;/p&gt;
&lt;p&gt;deploy-ghpage.js&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ghpages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gh-pages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

ghpages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;public&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    branch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;master&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    repo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 你預計發佈的repo位置&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Deploy Complete!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來跟剛剛一樣在 &lt;strong&gt;package.json&lt;/strong&gt;增加一個自訂指令&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;deploy:ghpage&amp;quot;: &amp;quot;npm run build &amp;amp;&amp;amp; node ./deploy-ghpage&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後執行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm run deploy:ghpage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以部署到gh-page的repo了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;CI/CD&lt;/h2&gt;
&lt;p&gt;到目前為止我們只需要在 &lt;strong&gt;content/blog/&lt;/strong&gt; 新增 &lt;strong&gt;文章資料夾&lt;/strong&gt; 以及 編輯文章主體 &lt;strong&gt;index.md&lt;/strong&gt;，  &lt;/p&gt;
&lt;p&gt;開發的時候執行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;發佈的時候執行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm run deploy:ghpage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以發文章了。&lt;/p&gt;
&lt;p&gt;但這樣每次發佈的時候都要再打一次指令且在寫文章的機器上執行一輪 release，&lt;br&gt;
如果可以在每次push完後自動做 deploy 發文體驗就會更好。&lt;/p&gt;
&lt;p&gt;在花了一些時間尋找方案以後，&lt;br&gt;
我決定用 Travis CI 來部署我的部落格。  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;前置設定&lt;/h2&gt;
&lt;p&gt;首先先要先準備好 Travis CI 的帳號，&lt;br&gt;
然後參考 &lt;a href=&quot;https://travis-ci.com/getting_started&quot;&gt;官方教學&lt;/a&gt; 連結 travis-ci 與 Github repo，&lt;br&gt;
也可以到 Travis CI 的 setting 頁選擇你的部落格 repo。  &lt;/p&gt;
&lt;p&gt;參考以下流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到 &lt;strong&gt;Setting&lt;/strong&gt; 頁  &lt;/li&gt;
&lt;li&gt;點 &lt;strong&gt;Manage repositories on GitHub&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;Repository access&lt;/strong&gt; 區域內的 &lt;strong&gt;Only select repositories&lt;/strong&gt; 選擇你的部落格repo  &lt;/li&gt;
&lt;li&gt;點選 Approve and install&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再來要產生 Github token，&lt;br&gt;
到 Github/Settings/Developer settings 內的 &lt;strong&gt;Personal access tokens&lt;/strong&gt; 區塊設定token，&lt;br&gt;
要記得設定完後要記錄起來，&lt;br&gt;
因為下次除了重新產生一組token以外沒有辦法看到token了。&lt;/p&gt;
&lt;p&gt;如果是 build public repo 只需要 &lt;strong&gt;public_repo&lt;/strong&gt; 權限，&lt;br&gt;
如果是 build private repo 的話則需要整個 &lt;strong&gt;repo&lt;/strong&gt; 權限。&lt;br&gt;
這部分 Github 官網文件有更詳細的&lt;a href=&quot;https://docs.github.com/en/developers/apps/scopes-for-oauth-apps&quot;&gt;說明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下來要建立 &lt;strong&gt;.travis.yml&lt;/strong&gt; 在 專案根目錄才能讓  Travis CI 知道要執行什麼樣的任務&lt;/p&gt;
&lt;p&gt;參考以下內容&lt;/p&gt;
&lt;p&gt;.travis.yml&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node_js
&lt;span class=&quot;token key atrule&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm install
&lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; gatsby build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由於我在開發機上發佈時的nodejs環境是使用 12，&lt;br&gt;
在yml檔中也是指定 12。&lt;br&gt;
完成後可以先 push 一個版本。&lt;/p&gt;
&lt;p&gt;如果沒意外可以在&lt;br&gt;
&lt;strong&gt;&lt;a href=&quot;https://travis-ci.com/github/%7Busername%7D/%7Brepo&quot;&gt;https://travis-ci.com/github/{username}/{repo&lt;/a&gt; name}&lt;/strong&gt;&lt;br&gt;
看到 Travis CI 會檢查這一次的 push 有沒有問題。&lt;/p&gt;
&lt;p&gt;接下來到 &lt;a href=&quot;https://travis-ci.com/github/%7Busername%7D/reponame/settings&quot;&gt;https://travis-ci.com/github/{username}/reponame/settings&lt;/a&gt; 設定token，&lt;br&gt;
要找到 Environment Variables 這個區塊並設定&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Name         |Value           |
GITHUB_TOKEN |剛剛拿到的token  |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h2&gt;小插曲 為什麼不直接使用 deploy:ghpage 指令&lt;/h2&gt;
&lt;p&gt;其實我一開始是直接寫 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm run deploy&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ghpage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Travis CI 也真的跑過了，&lt;br&gt;
但是我的 Github Page 卻沒有成功被更新，&lt;br&gt;
思考了一下才想到，&lt;br&gt;
我根本沒有在 build script 裡面指定 token ，&lt;br&gt;
這個 deploy 當然不會過，&lt;br&gt;
加上 build script 沒有顯示錯誤訊息，&lt;br&gt;
才會導致沒有正確上版。  &lt;/p&gt;
&lt;h2&gt;再次修改.travis.yml&lt;/h2&gt;
&lt;p&gt;設定完 token 也確定 Travis CI 可以完成 build 以後，&lt;br&gt;
接下來要 push 完整的 &lt;strong&gt;.travis.yml&lt;/strong&gt;。&lt;br&gt;
這裡使用的 travis 的 deploy 指令。  &lt;/p&gt;
&lt;p&gt;參考以下設定&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node_js

&lt;span class=&quot;token key atrule&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; master

&lt;span class=&quot;token key atrule&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm &lt;span class=&quot;token comment&quot;&gt;#保存npm lib 避免每次 Travis CI build的時候會產生全新環境都要先下載一次所有lib&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12&quot;&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm install

&lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; gatsby build

&lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pages
  &lt;span class=&quot;token key atrule&quot;&gt;skip-cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;github-token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $GITHUB_TOKEN &lt;span class=&quot;token comment&quot;&gt;#剛剛在Travis CI設定的環境變數&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user/repo&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 不填寫就是deploy到當前分支&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;local-dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; public &lt;span class=&quot;token comment&quot;&gt;#gh-page輸出的是public 資料夾&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;keep-history&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# target_branch: gh-pages #預備發佈的branch 預設是gh-pages&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; master &lt;span class=&quot;token comment&quot;&gt;#source branch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**更詳細的設定可以參考 Travis CI官網&lt;a href=&quot;https://docs.travis-ci.com/user/deployment/pages/&quot;&gt;文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後將設定好的 yml 檔 push 到 master 就完成 Travis CI 自動部署了。  &lt;/p&gt;
&lt;p&gt;做完一輪，&lt;br&gt;
找了一下文件才發現 private repo build &lt;a href=&quot;https://docs.travis-ci.com/user/travis-ci-for-private/&quot;&gt;有一百次的限制&lt;/a&gt;，&lt;br&gt;
在使用上要注意一下。&lt;/p&gt;
&lt;p&gt;ref: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/how-gatsby-works-with-github-pages/&quot;&gt;https://www.gatsbyjs.com/docs/how-gatsby-works-with-github-pages/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/languages/javascript-with-nodejs/&quot;&gt;https://docs.travis-ci.com/user/languages/javascript-with-nodejs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/deployment/pages/&quot;&gt;https://docs.travis-ci.com/user/deployment/pages/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[學習透過 Gatsby.js 架設部落格]]></title><description><![CDATA[本文會提到 一些對使用個人部落格的想法 (個人廢話) 開發環境的前置準備實際執行一輪的筆記 稍微了解 Gatsby.js 如何產生出一頁、模組以及 CSS…]]></description><link>https://kawwenwans.github.io/learn-gatsbyjs-to-start-blog-project/</link><guid isPermaLink="false">https://kawwenwans.github.io/learn-gatsbyjs-to-start-blog-project/</guid><pubDate>Mon, 17 Aug 2020 08:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;本文會提到&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一些對使用個人部落格的想法 &lt;del&gt;(個人廢話)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;開發環境的前置準備實際執行一輪的筆記&lt;/li&gt;
&lt;li&gt;稍微了解 Gatsby.js 如何產生出一頁、模組以及 CSS 套用等&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;一直以來都有架設一個部落格的想法，&lt;br&gt;
覺得日常的學習可以被記下來是一件很好的事情，&lt;br&gt;
但心裡又會覺得似乎不用那麼麻煩 &lt;del&gt;(其實就是懶)&lt;/del&gt;，&lt;br&gt;
上一季因為公司要求績效報告要交學習心得以後，&lt;br&gt;
開始嘗試紀錄學習心得以後發現，&lt;br&gt;
有寫下紀錄與只是讀過甚至是自己動手做一輪卻沒有記錄下來的差異是很大的，&lt;br&gt;
因為在紀錄的過程中會從要講述給別人聽的角度去發現有些地方自己其實無法去解釋，&lt;br&gt;
所以又會回過頭了解沒有弄懂的地方。&lt;br&gt;
剛好在這一季的績效報告有要求學習心得一定要以部落格的形式，&lt;br&gt;
(我是上一季學習筆記寫 MD 放在 gist 上的懶人..XD)&lt;br&gt;
也算是加速了我在這一季重新架設出一個部落格。&lt;/p&gt;
&lt;h2&gt;為什麼我用 Gatsby.js 來架設部落格&lt;/h2&gt;
&lt;p&gt;其實要達成自我學習筆記放在部落格這個條件，&lt;br&gt;
有很多免費且簡單的方案可以選擇，&lt;br&gt;
我曾經用 Blogger 寫過文，&lt;br&gt;
雖然很方便，&lt;br&gt;
但是寫作體驗上我非常不喜歡，&lt;br&gt;
改樣板也很麻煩。  &lt;/p&gt;
&lt;p&gt;我心中理想的部落格有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要可以用 MD 格式&lt;br&gt;
(目前沒看過網頁編輯器比直接寫 MD 好用的)  &lt;/li&gt;
&lt;li&gt;設定到可以寫第一篇文的前置作業的成本不要太高&lt;br&gt;
(成本包含時間與金錢等)&lt;/li&gt;
&lt;li&gt;方便部落格搬家&lt;br&gt;
(現成部落格服務搬家通常不容易)&lt;/li&gt;
&lt;li&gt;程式碼高亮&lt;/li&gt;
&lt;li&gt;[加分條件] SEO 支援&lt;/li&gt;
&lt;li&gt;[加分條件]可以用 Git 版控做文章管理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大部分除 WordPress.com 的部落格服務可以達成  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[] 要可以用 MD 格式&lt;br&gt;
(這應該是不一定有支援)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 設定到可以寫第一篇文的前置作業的成本不要太高&lt;/li&gt;
&lt;li&gt;[] 方便部落格搬家
(部落格搬家是可以當一門生意的，搬部落格其實很麻煩)&lt;/li&gt;
&lt;li&gt;[] 程式碼高亮&lt;br&gt;
(這個算是不一定支援，大部分要透過 js 套件來完成)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [加分條件] SEO 支援&lt;br&gt;
(基本上都會支援)&lt;/li&gt;
&lt;li&gt;[] [加分條件]可以用 Git 版控做文章管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WordPress.com 的部落格服務可以達成:  &lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 要可以用MD格式&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 設定到可以寫第一篇文的前置作業的成本不要太高&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 方便部落格搬家&lt;br&gt;
(官方直接支援搬到自架 WordPress 主機)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 程式碼高亮  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [加分條件] SEO 支援&lt;/li&gt;
&lt;li&gt;[] [加分條件]可以用 Git 版控做文章管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但搬到 WordPress 自架主機則會變成:  &lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 要可以用 MD 格式  &lt;/li&gt;
&lt;li&gt;[] 設定到可以寫第一篇文的前置作業的成本不要太高&lt;br&gt;
(主機設定時間成本以及主機金錢成本等，WP 主機維護相關知識對目前的我來說能在工作上沿用的程度不高)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 方便部落格搬家  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 程式碼高亮&lt;br&gt;
(需安裝套件)  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [加分條件] SEO 支援  &lt;/li&gt;
&lt;li&gt;[] [加分條件]可以用 Git 版控做文章管理  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而靜態網頁產生器(Static site generator)可以達成的有:&lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 要可以用 MD 格式  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 設定到可以寫第一篇文的前置作業的成本不要太高&lt;br&gt;
( Github 以及 MD 都是現成的，網頁前端技能學習可以直接在網頁開發領域沿用)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 方便部落格搬家&lt;br&gt;
(都是靜態檔案可遷移性最高)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 程式碼高亮&lt;br&gt;
(目前看過的都支援)  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [加分條件] SEO 支援&lt;br&gt;
(可能需要自己再優化)  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [加分條件]可以用 Git 版控做文章管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SSG 看起來很美好，&lt;br&gt;
但其實這樣會捨棄掉一些東西，
比方像是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;點擊計數器&lt;/li&gt;
&lt;li&gt;留言功能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這部分只能依賴外部服務來達成，&lt;br&gt;
但目前先不考慮。&lt;/p&gt;
&lt;p&gt;在動手前看了 Gatsby.js 跟 Next.js 這兩套以 React 為基底的框架，&lt;br&gt;
選擇 Gatsby.js 的原因還蠻單純的，&lt;br&gt;
看起來 Gatsby.js 的 Plugin 生態系比較充足，&lt;br&gt;
且 Next.js 現成合適的 Starter 比較少，&lt;br&gt;
最後聽見強者我同事說 Next.js 沒有 server site render 的話會有些問題，
就確定以 Gatsby.js 起手了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;前置環境&lt;/h2&gt;
&lt;p&gt;使用 Gatsby 需要以下環境&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Gatsby cli&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可參考 &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/part-zero/&quot;&gt;Gatsby 官方網站教學&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下簡單帶過&lt;/p&gt;
&lt;h3&gt;Node.js&lt;/h3&gt;
&lt;p&gt;Gatsby 需要 Node.js 環境，&lt;br&gt;
可以到 NodeJs 官方網站有安裝的方法，&lt;br&gt;
或是參考 Gatsby 官方網站的教學，&lt;br&gt;
這裡我使用 choco 在 windows 平台上做安裝 NodeJs lts 版&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;choco install nodejs-lts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安裝完後再 terminal 下檢查是否正確安裝&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;會顯示類似以下訊息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;v12.18.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;如果沒有裝的話，
Gatsby 有提供&lt;a href=&quot;https://www.gatsbyjs.org/tutorial/part-zero/#install-git&quot;&gt; Git 安裝教學&lt;/a&gt;，&lt;br&gt;
或是可以參考網路上的其他教學做安裝&lt;/p&gt;
&lt;h3&gt;安裝 gatsby-cli&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.org/tutorial/part-zero/#using-the-gatsby-cli&quot;&gt;官方安裝教學&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是實際操作的簡略紀錄&lt;/p&gt;
&lt;p&gt;執行以下指令&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g gatsby-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;個人不喜歡開啟匿名資料收集 ( telemetry )，&lt;br&gt;
所以如果想要關閉的話可以下以下指令關閉&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby telemetry --disable&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以參考 Gatsby 官方網站的&lt;a href=&quot;https://www.gatsbyjs.org/docs/telemetry/&quot;&gt;說明&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;一個簡單的Hello World&lt;/h2&gt;
&lt;p&gt;可參考官方網站的&lt;a href=&quot;https://www.gatsbyjs.org/tutorial/part-zero/#create-a-gatsby-site&quot;&gt;教學&lt;/a&gt;，&lt;br&gt;
以下是實際操作的簡略紀錄&lt;/p&gt;
&lt;p&gt;在 terminal 下以下指令新增專案&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;gatsby new&lt;/strong&gt; 指令的結構是&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby new &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;SITE_DIRECTORY_NAME&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;URL_OF_STARTER_GITHUB_REPO&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在跳到工作目錄以後執行指令就可以將網站以開發模式跑起來，&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;小插曲&lt;/h3&gt;
&lt;p&gt;在我學習期間，&lt;br&gt;
線上的 hello-world 照著跑是無法開啟的，&lt;br&gt;
會看到以下錯誤:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Error: Cannot find module &amp;#39;gatsby-cli/lib/reporter&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這部分只要&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到 package.json 的 Gatsby 從 &lt;strong&gt;2.24.41&lt;/strong&gt; &gt; &lt;strong&gt;2.24.42&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;刪除 package-lock.json&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行以下指令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; npm i gatsby-cli&lt;br&gt;
npm install&lt;br&gt;
gatsby develop  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就可以了&lt;/p&gt;
&lt;p&gt;如果照著操作到現在，&lt;br&gt;
就可以透過 &lt;a href=&quot;http://localhost:8000/&quot;&gt;localhost:8000&lt;/a&gt; 來訪問範例 Gatsby 網站，&lt;br&gt;
如果自己產生最小可用的 Hello-world 的話則需要以下檔案&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.
├── src
├── gatsby-config.js
└── package.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並在工作目錄下執行 &lt;strong&gt;npm install&lt;/strong&gt; 後就可以執行 &lt;strong&gt;gatsby develop&lt;/strong&gt; 並成功啟動 Gatsby 開發模式&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Gatsby Page&lt;/h2&gt;
&lt;p&gt;在前面一點的文章中我們按照 Gatsby 官方教學跑了一個 Hello-World，&lt;br&gt;
當使用 &lt;strong&gt;gatsby develop&lt;/strong&gt; 指令啟動開發伺服器後，&lt;br&gt;
會開啟 Homepage，&lt;br&gt;
這個檔案在 src/pages/index.js，&lt;br&gt;
在 Gatsby 中，&lt;br&gt;
任何定義在 src/pages/*.js 的 React component 會被當成是 Gatsby Page，&lt;br&gt;
舉例像是如果要新增一個 about 頁的話，&lt;br&gt;
就要新增 &lt;strong&gt;src/pages/about.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;About Kevin&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Some introduction&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;page components &amp;#x26; sub components&lt;/h2&gt;
&lt;p&gt;現代網頁比較複雜，&lt;br&gt;
通常網頁前端開發上也會做模組化，&lt;br&gt;
如果要增加模組的話要新增 &lt;strong&gt;src/components/*.js&lt;/strong&gt;&lt;br&gt;
如果我們新增一個 &lt;strong&gt;src/components/header.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headerText&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並將首頁改成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Header &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../components/header&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Header headerText&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Header from index&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; aaa&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此時畫面就會顯示&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Header from index
Hello world! aaa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要從Home頁跳到 About 頁的話可以使用&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/about/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;About&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Link&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在使用時要額外 import 套件&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Link &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;增加網站的 Style&lt;/h2&gt;
&lt;p&gt;通常來說一個網站都會有一些全站共用樣式，&lt;br&gt;
在 Gatsby 中，
我們需要先建立 &lt;strong&gt;gatsby-browser.js&lt;/strong&gt;，&lt;br&gt;
然後再將 &lt;strong&gt;.css&lt;/strong&gt; 檔案加在 &lt;strong&gt;gatsby-browser.js&lt;/strong&gt;，&lt;br&gt;
如果要加入全站用的樣式的話，&lt;br&gt;
可以加入&lt;br&gt;
&lt;strong&gt;src/styles/global.css&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;並在 &lt;strong&gt;gatsby-browser.js&lt;/strong&gt; 加入&lt;/p&gt;
&lt;p&gt;ES Module syntax &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./src/styles/global.css&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或是  &lt;/p&gt;
&lt;p&gt;CommonJS syntax &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./src/styles/global.css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;*以上的差別是 CommonJS 可以在 node.js 環境中執行，ES Module 不可以&lt;/p&gt;
&lt;h2&gt;sub components CSS&lt;/h2&gt;
&lt;p&gt;在 &lt;strong&gt;src/components&lt;/strong&gt; 加入以下檔案&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;articles-part.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ArticlesCSS &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./articles.module.css&quot;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ArticlesCSS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ArticlesPart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;articles-part&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;some article&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;articles.module&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.articles-part&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; aqua&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這時候會發現 CSS 沒有正確在套用在畫面上，&lt;br&gt;
原因是在 build 的時候 CSS 會被打包成特定檔案格式，&lt;br&gt;
實際產生的 CSS 檔與 build 出來的 CSS 檔內容不同，&lt;br&gt;
從 debug console 可以發現加載的 CSS 檔內的 CSS 樣式是有加上隨機字串的，&lt;br&gt;
這時候只要參考 &lt;strong&gt;console.log(ArticlesCSS)&lt;/strong&gt; 內的物件，
改成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ArticlesCSS &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./articles.module.css&quot;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ArticlesCSS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ArticlesPart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ArticlesCSS&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;articlesPart&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;some article&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就能正確套用 CSS 樣式。&lt;/p&gt;
&lt;p&gt;學習了一些基礎前置知識以後，&lt;br&gt;
可以參考以下兩篇文來部署部落格:&lt;br&gt;
&lt;a href=&quot;../deploy-gatsby-blog-note/&quot;&gt;透過 Travis CI 部署部落格&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;../deploy-gatsby-by-github-action/&quot;&gt;透過 GitHub Action 部署部落格&lt;/a&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ref:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/tutorial/&quot;&gt;https://www.gatsbyjs.org/tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[.Net Span<T> API and Memory<T> API Study]]></title><description><![CDATA[Microsoft 在2018年一月的 MSDN Magazine 初步釋出了 Span API 的相關資訊，
這組 API 目前在 System.Memory 的 MemoryExtensions 下 主要可以產生以下四種類別 Span<T> Memory<T…]]></description><link>https://kawwenwans.github.io/study-dotnet-span-api/</link><guid isPermaLink="false">https://kawwenwans.github.io/study-dotnet-span-api/</guid><pubDate>Sat, 27 Jun 2020 08:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Microsoft 在2018年一月的 MSDN Magazine 初步釋出了 Span API 的相關資訊，
這組 API 目前在 System.Memory 的 MemoryExtensions 下&lt;/p&gt;
&lt;p&gt;主要可以產生以下四種類別&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Span&amp;#x3C;T&gt;&lt;/li&gt;
&lt;li&gt;Memory&amp;#x3C;T&gt;&lt;/li&gt;
&lt;li&gt;ReadOnlySpan&amp;#x3C;T&gt;&lt;/li&gt;
&lt;li&gt;ReadOnlyMomory&amp;#x3C;T&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Span&amp;#x3C;T&gt; 與 Memory&amp;#x3C;T&gt; 是一種對記憶體操作的API，表示一段連續的記憶體。讓開發者可以更安全的操作記憶體。&lt;/p&gt;
&lt;p&gt;Span&amp;#x3C;T&gt; 與 Memory&amp;#x3C;T&gt; 主要是透過以下 API 來存取記憶體的一個區段&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;public Span&amp;lt;T&amp;gt; Slice(int start);
public ReadOnlySpan&amp;lt;T&amp;gt; Slice(int start);
public Span&amp;lt;T&amp;gt; Slice(int start, int length);
public ReadOnlySpan&amp;lt;T&amp;gt; Slice(int start, int length);

public Memory&amp;lt;T&amp;gt; Slice(int start);
public ReadOnlyMemory&amp;lt;T&amp;gt; Slice(int start);
public Memory&amp;lt;T&amp;gt; Slice(int start, int length);
public ReadOnlyMemory&amp;lt;T&amp;gt; Slice(int start, int length);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假如是一串字串的話，
用 Span&amp;#x3C;T&gt; 與 Memory&amp;#x3C;T&gt; 可以直接指定某段記憶體位置而不用直接多放一段字串到字串池&lt;/p&gt;
&lt;p&gt;假如要從 Hello World 切出 or 這個字串的時候&lt;/p&gt;
&lt;p&gt;使用 String.SubString 會變成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;字串池
---------------------------
|H|e|l|l|o| |W|o|r|l|d|o|r|
---------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而使用 Span 會變成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;字串池
-----------------------
|H|e|l|l|o| |W|o|r|l|d|
-----------------------
              |   |
              span1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;以下是對 Span API 做的一些對比測試&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;常見的字串分割操作&lt;/p&gt;
&lt;h2&gt;String.SubString&lt;/h2&gt;
&lt;h3&gt;使用 String SubString 做一百萬次 SubString&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/1.NativeSubString/Program.cs&quot;&gt;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/1.NativeSubString/Program.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用時間:21ms&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         4
    Allocation Rate / 1 sec (B)                            0
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      1
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                        24
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                       288
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                   115,216
    LOH Size (B)                                      19,640
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            7
    ThreadPool Completed Work Item Count / 1 sec           1
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      23&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用ReadOnlySpan&amp;#x3C;char&gt; 做一百萬次 Slice&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/2.ReadOnlySpanSubString/Program.cs&quot;&gt;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/2.ReadOnlySpanSubString/Program.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用時間:22ms&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         0
    Allocation Rate / 1 sec (B)                            0
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      0
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                         0
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                         0
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                         0
    LOH Size (B)                                           0
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            8
    ThreadPool Completed Work Item Count / 1 sec           0
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用 ReadOnlyMemory&amp;#x3C;char&gt; 做一百萬次 Slice&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/3.ReadOnlyMemorySubString/Program.cs&quot;&gt;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/3.ReadOnlyMemorySubString/Program.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用時間:33ms&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         0
    Allocation Rate / 1 sec (B)                            0
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      0
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                         0
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                         0
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                         0
    LOH Size (B)                                           0
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            8
    ThreadPool Completed Work Item Count / 1 sec           0
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;String.Split&lt;/h2&gt;
&lt;h3&gt;使用 String 做一百萬次 Split&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/tree/master/4.NativeSplit&quot;&gt;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/tree/master/4.NativeSplit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用時間:177ms&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         1
    Allocation Rate / 1 sec (B)                            0
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      2
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                        24
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                    11,400
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                   115,200
    LOH Size (B)                                      19,640
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            7
    ThreadPool Completed Work Item Count / 1 sec           1
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      23&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用 ReadOnlySpan&amp;#x3C;char&gt; 做一百萬次 Split 實作&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/5.ReadOnlySpanSplit/Program.cs&quot;&gt;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/5.ReadOnlySpanSplit/Program.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用時間:222ms&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         0
    Allocation Rate / 1 sec (B)                            0
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      0
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                         0
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                         0
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                         0
    LOH Size (B)                                           0
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            8
    ThreadPool Completed Work Item Count / 1 sec           0
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用 ReadOnlyMemory&amp;#x3C;char&gt; 做一百萬次 Split 實作&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/6.ReadOnlyMemorySplit/Program.cs&quot;&gt;https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/6.ReadOnlyMemorySplit/Program.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用時間:224ms&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         0
    Allocation Rate / 1 sec (B)                            0
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      0
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                         0
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                         0
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                         0
    LOH Size (B)                                           0
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            8
    ThreadPool Completed Work Item Count / 1 sec           0
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Span&amp;#x3C;T&gt; 與 Memory&amp;#x3C;T&gt; 的一些差異&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Span&amp;#x3C;T&gt; 只能用在同步方法， Memory&amp;#x3C;T&gt; 可以用在非同步方法。&lt;/li&gt;
&lt;li&gt;Memory&amp;#x3C;T&gt; 可以轉成 Span&amp;#x3C;T&gt; ，Span&amp;#x3C;T&gt;不能轉成 Memory&amp;#x3C;T&gt;。&lt;/li&gt;
&lt;li&gt;Span&amp;#x3C;T&gt; 在 Stack 上，Memory&amp;#x3C;T&gt; 在 Heap 上。&lt;/li&gt;
&lt;li&gt;Span&amp;#x3C;T&gt; 不能通過ValueTuple方式回傳，Memory&amp;#x3C;T&gt; 可以。&lt;/li&gt;
&lt;li&gt;Span&amp;#x3C;T&gt; 不能成為類別的成員，Memory&amp;#x3C;T&gt;可以。&lt;/li&gt;
&lt;li&gt;Span&amp;#x3C;T&gt; 不能手動釋放，Memory&amp;#x3C;T&gt; 可以透過 Pin() 方法通知 runtime 由開發者手動回收。&lt;/li&gt;
&lt;li&gt;Span&amp;#x3C;T&gt; 不能作為泛型類型參數，Memory&amp;#x3C;T&gt;可以。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*造成Span&amp;#x3C;T&gt; 與 Memory&amp;#x3C;T&gt; 的一些差異主要都在於 Span&amp;#x3C;T&gt; 是放在 Stack 上所產生出的限制，&lt;/p&gt;
&lt;h2&gt;一些可用的原生API&lt;/h2&gt;
&lt;p&gt;目前一些原生 API 已經支援以 Span&amp;#x3C;T&gt; 與 Memory&amp;#x3C;T&gt; 當成參數，比方說&lt;/p&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;public static string Concat (ReadOnlySpan&amp;lt;char&amp;gt; str0, ReadOnlySpan&amp;lt;char&amp;gt; str1);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Utf8Formatter&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;public static bool TryFormat (int value, Span&amp;lt;byte&amp;gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = default);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Utf8Parser &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;public static bool TryParse (ReadOnlySpan&amp;lt;byte&amp;gt; source, out int value, out int bytesConsumed, char standardFormat = &amp;#39;\0&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ref:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay&quot;&gt;https://docs.microsoft.com/zh-tw/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/standard/memory-and-spans/memory-t-usage-guidelines&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/standard/memory-and-spans/memory-t-usage-guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[.Net 記憶體管理的一些 study]]></title><description><![CDATA[這一季聽了許多同事在記憶體管理的一些討論， 決定花一些時間來讀官方文件以及動手實作看看。 在研究記憶體管理之前要先有相關監測工具， 我使用 .Net 內建的工具來做監測。 先執行一個簡單的 Hello world 並透過以下指令取得 process id…]]></description><link>https://kawwenwans.github.io/study-dotnet-memory-management/</link><guid isPermaLink="false">https://kawwenwans.github.io/study-dotnet-memory-management/</guid><pubDate>Fri, 26 Jun 2020 08:00:00 GMT</pubDate><content:encoded>&lt;p&gt;這一季聽了許多同事在記憶體管理的一些討論，&lt;br&gt;
決定花一些時間來讀官方文件以及動手實作看看。&lt;/p&gt;
&lt;p&gt;在研究記憶體管理之前要先有相關監測工具，&lt;br&gt;
我使用 .Net 內建的工具來做監測。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;dotnet tool install --global dotnet-trace
dotnet tool install --global dotnet-counters&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先執行一個簡單的 Hello world&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(&amp;quot;Hello World!&amp;quot;);
            Console.ReadKey();
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並透過以下指令取得 process id:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;dotnet-trace ps&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後找到要監測的 pid&lt;/p&gt;
&lt;p&gt;接下來執行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;dotnet-counters monitor --refresh-interval 1 -p {pid}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         0
    Allocation Rate / 1 sec (B)                        8,168
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      0
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                         0
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                         0
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                         0
    LOH Size (B)                                           0
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            7
    ThreadPool Completed Work Item Count / 1 sec           0
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來要多產生一些物件&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;	class Program
	{
		static void Main(string[] args)
		{
			Console.WriteLine(&amp;quot;press any key to start&amp;quot;);
			Console.ReadKey();
			for (var i = 1; i &amp;lt; 10 * 60; i++)
			{
				var array = new byte[500000];
				var random = new Random();
				random.NextBytes(array);
				Thread.Sleep(100);
			}
			Console.WriteLine(&amp;quot;press any key exit...&amp;quot;);
			Console.ReadKey();
		}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行中&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         0
    Allocation Rate / 1 sec (B)                    5,008,128
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      2
    Gen 0 GC Count / 60 sec                              120
    Gen 0 Size (B)                                        24
    Gen 1 GC Count / 60 sec                              120
    Gen 1 Size (B)                                     5,952
    Gen 2 GC Count / 60 sec                              120
    Gen 2 Size (B)                                   239,456
    LOH Size (B)                                   4,020,088
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            8
    ThreadPool Completed Work Item Count / 1 sec           0
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                2
    Working Set (MB)                                      24&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行結束&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[System.Runtime]
    % Time in GC since last GC (%)                         0
    Allocation Rate / 1 sec (B)                        8,168
    CPU Usage (%)                                          0
    Exception Count / 1 sec                                0
    GC Heap Size (MB)                                      2
    Gen 0 GC Count / 60 sec                                0
    Gen 0 Size (B)                                        24
    Gen 1 GC Count / 60 sec                                0
    Gen 1 Size (B)                                   117,360
    Gen 2 GC Count / 60 sec                                0
    Gen 2 Size (B)                                   117,704
    LOH Size (B)                                   3,520,032
    Monitor Lock Contention Count / 1 sec                  0
    Number of Active Timers                                0
    Number of Assemblies Loaded                            8
    ThreadPool Completed Work Item Count / 1 sec           0
    ThreadPool Queue Length                                0
    ThreadPool Thread Count                                0
    Working Set (MB)                                      24&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上資訊有幾個名詞&lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;p&gt;Allocation Rate / 1 sec (B) 約為 5,000,000
(程式碼是每100毫秒 new byte[500000]&lt;/p&gt;
&lt;p&gt;大型物件堆積(LOH)占用非常多的原因是因為當物件要求超過 85,000 B的時候，&lt;br&gt;
runtime 會一律將物件放在 LOH 上，&lt;br&gt;
而小於 85,000 B 的物件會放在(小型物件堆積) SOH 上。&lt;/p&gt;
&lt;h2&gt;物件在記憶體中會放在以下幾個層代&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;層代 0(Gen 0)&lt;/li&gt;
&lt;li&gt;層代 1(Gen 1)&lt;/li&gt;
&lt;li&gt;層代 2(Gen 2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;占用記憶體小的物件會在 Gen 0 結束，
留存比較久的物件會提升到 Gen 1 或 Gen 2，
提升的條件為 GC 發生後沒被回收的物件就會被提升，
而大型物件會一律在 Gen 2 中。&lt;/p&gt;
&lt;h2&gt;GC通常發生在&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Gen 0 達到回收閥值&lt;/li&gt;
&lt;li&gt;LOH 達到回收閥值&lt;/li&gt;
&lt;li&gt;系統記憶體不足(由作業系統通知)&lt;/li&gt;
&lt;li&gt;呼叫 GC.Collect() 後強制執行&lt;br&gt;
(不是每種 runtime 都是這樣實作的，如Java的實作是只通知 GC ，系統不一定會馬上執行，也可能忽略 GC 請求)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;GC有兩種方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;工作站垃圾收集(Workstation garbage collection)
在只有一個處理器的的機器上會強制使用這種方式，
GC執行緒會與其他執行緒搶CPU時間&lt;/li&gt;
&lt;li&gt;伺服器垃圾收集(Server garbage collection)
每個處理器上都會有一條專門GC執行緒，&lt;br&gt;
由於有多個 GC 執行緒，&lt;br&gt;
所以 GC 速度會比工作站垃圾收集快，
但是如果有多個程式在同一台機器上使用伺服器垃圾收集時會互搶CPU時間，&lt;br&gt;
所以會建議不要同時開伺服器垃圾回收，&lt;br&gt;
甚至在上百個程式在同一台機器上運行時，&lt;br&gt;
建議切換為工作站垃圾收集避免大量的 context switch。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;前景GC與背景GC&lt;/h2&gt;
&lt;p&gt;GC 也分為&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;背景垃圾收集(background GC)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在背景垃圾收集發生時所有託管的執行緒會盡可能的繼續執行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前景垃圾收集(foreground GC)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在前景垃圾收集發生時所有託管的執行緒都必須暫停執行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;不同Gen有不同的回收期間&lt;/h2&gt;
&lt;p&gt;Gen 1 GC 發生時，會同時對 Gen 0 與 Gen 1 做記憶體回收，&lt;br&gt;
Gen 2 GC 發生時，則會同時對 Gen 0、Gen 1 與 Gen 2 做記憶體回收，
所以Gen 2 GC又稱為完整GC。  &lt;/p&gt;
&lt;h2&gt;以下是一塊記憶體配置的示例&lt;/h2&gt;
&lt;h3&gt;SOH Allocations and GC&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GC前&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;----------------------------------------------------
|Obj1(使用中) |Obj2(未使用)|Obj3(使用中)|Obj4(未使用)|
----------------------------------------------------
|            |            |           |
Gen 0        Gen 0        Gen 0       Gen 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開始GC&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;----------------------------------------------------
|Obj1(使用中) |            |Obj3(使用中)|           |
----------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;壓縮&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;----------------------------------------------------
|Obj1(使用中) |Obj3(使用中)|                        |
----------------------------------------------------
|
Gen 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此時Obj1 Obj3提升到Gen 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;LOH Allocations and GC&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GC前&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;----------------------------------------------------
|Obj1(使用中) |Obj2(未使用)|Obj3(使用中)|Obj4(未使用)|
----------------------------------------------------
|            |            |           |
Gen 2        Gen 2        Gen 2       Gen 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;----------------------------------------------------
|Obj1(使用中) |            |Obj3(使用中)|           |
----------------------------------------------------
|                         |
Gen 2                     Gen 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;LOH 的記憶體區塊通常不會壓縮，&lt;br&gt;
因為大型物件的搬移成本較高，&lt;br&gt;
在較新的 runtime 可以透過設定，&lt;br&gt;
GCSettings.LargeObjectHeapCompactionMode&lt;br&gt;
決定是否要做 LOH 壓縮(*7)&lt;br&gt;
(文件有提到目前不會自動壓縮 LOH 但未來 .Net 不排除會自動壓縮 LOH )  &lt;/p&gt;
&lt;h3&gt;記憶體使用不當對效能的影響&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;頻繁 GC 導致執行緒被暫停吞吐量降低  &lt;/li&gt;
&lt;li&gt;記憶體碎片過多導致頻繁壓縮甚至因無法配置記憶體導致記憶體不足  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;記憶體使用上的一些優化技巧&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在預先知道集合大小時直接配置剛好的大小避免自動配置導致配置多餘的記憶體。  &lt;/li&gt;
&lt;li&gt;在集合(如列表)可重用的情形下直接透過 static 宣告直接重用。&lt;br&gt;
(通常在不平行執行的 Job 等只有一條執行緒存取的情境較常見)  &lt;/li&gt;
&lt;li&gt;若是資料物件傳遞的情境可以考慮定出介面並實作，&lt;br&gt;
使物件傳遞時不須因為要轉換成小物件而需再建立一個小物件並重新賦值。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;		public interface IAccountInfo
		{
			string AccountId { get; set; }
			string Password { get; set; }
			string Name { get; set; }
			int Gender { get; set; }
			string FirstName { get; set; }
			string LastName { get; set; }
		}

		public class AccountInfo : IAccountInfo, ISmallAccountInfo
		{
			public string AccountId { get; set; }
			public string Password { get; set; }
			public string Name { get; set; }
			public int Gender { get; set; }
			public string FirstName { get; set; }
			public string LastName { get; set; }
			public string FullName { get =&amp;gt; FirstName + LastName; }
		}

		public interface ISmallAccountInfo
		{
			string AccountId { get; }
			string Password { get; }
			string FullName { get; }
		}

		public class SmallAccountInfo : ISmallAccountInfo
		{
			public string AccountId { get; }
			public string Password { get; }
			public string FullName { get; }
		}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在取得 AccountInfo 物件後，&lt;br&gt;
若需要呼叫一個方法而此方法需要 SmallAccountInfo 資料物件，&lt;br&gt;
就可以考慮透過這樣的技巧省去新配置物件以及賦值。&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;部分無狀態物件可考慮用 Singleton，&lt;br&gt;
但建議透過DI容器來使用 Singleton。  &lt;/li&gt;
&lt;li&gt;實作 Object Pool 將部分常常重複建立的物件都透過Pool來取得避免不斷重配置記憶體後再被回收。(手機應用開發上很常見)  &lt;/li&gt;
&lt;li&gt;使用 .Net 提供的 Span&amp;#x3C;T&gt; 和 Memory&amp;#x3C;T&gt; API操作記憶體&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ref:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/core/diagnostics/dotnet-trace&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/core/diagnostics/dotnet-trace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/core/diagnostics/dotnet-counters&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/core/diagnostics/dotnet-counters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/aspnet/core/performance/memory?view=aspnetcore-3.1&quot;&gt;https://docs.microsoft.com/zh-tw/aspnet/core/performance/memory?view=aspnetcore-3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/core/diagnostics/debug-memory-leak&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/core/diagnostics/debug-memory-leak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/background-gc&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/background-gc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/api/system.gc.collect?view=netcore-3.1&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/api/system.gc.collect?view=netcore-3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/api/system.runtime.gcsettings.largeobjectheapcompactionmode?view=netcore-3.1&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/api/system.runtime.gcsettings.largeobjectheapcompactionmode?view=netcore-3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/workstation-server-gc&quot;&gt;https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/workstation-server-gc&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>