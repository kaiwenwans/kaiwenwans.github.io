{"componentChunkName":"component---src-templates-blog-post-js","path":"/a-way-to-rolling-update-your-service-on-cloud/","result":{"data":{"site":{"siteMetadata":{"title":"kevin wang's blog"}},"markdownRemark":{"id":"957a5110-e097-54ad-b281-fdb2f46dc51a","excerpt":"傳統的服務部屬方案 一個軟體服務在線上都有機會面臨到需要升級的時候， 一般傳統的軟體升級方式可能是這樣的，   traditional-continue-deploy.svg Artifact 是可用於部屬的包 準備新的 Artifact 到 Server…","html":"<h2>傳統的服務部屬方案</h2>\n<p>一個軟體服務在線上都有機會面臨到需要升級的時候，<br>\n一般傳統的軟體升級方式可能是這樣的，  </p>\n<p><img src=\"/e381376d52ab380332da4ca447d0fe21/traditional-continue-deploy.svg\" alt=\"traditional-continue-deploy.svg\"></p>\n<blockquote>\n<p><strong>Artifact</strong> 是可用於部屬的包</p>\n</blockquote>\n<ol>\n<li>準備新的 Artifact 到 Server 的暫存資料夾</li>\n<li>停止線上執行環境</li>\n<li>清除目前執行環境上的資料夾資料</li>\n<li>將新的 Artifact 放到執行環境的資料夾</li>\n<li>啟動執行環境</li>\n</ol>\n<p>這樣的升級方式會面臨幾個情形，  </p>\n<ul>\n<li>升級服務期間會造成服務短暫中斷</li>\n<li>服務如果需要退版的時候需要重新準備降版</li>\n</ul>\n<h2>服務不下線的滾動升級方案</h2>\n<p>要讓一個服務可以在不下線的情況下完成升級，<br>\n需要幾個準備:</p>\n<ol>\n<li>準備一個新版本的服務</li>\n<li>檢查新部屬的服務是否正常</li>\n<li>將流量導向新的服務</li>\n<li>如果新的服務沒問題的話關閉舊服務</li>\n<li>反之新服務有問題需退版則流量導回舊服務</li>\n</ol>\n<p>實際的實作大略如底下的圖</p>\n<p><img src=\"/6f404a2927b1d87ac9eda5eefef81cd3/rolling-update-deploy.svg\" alt=\"rolling-update-deploy.svg\"></p>\n<blockquote>\n<p><strong>Health Check Service</strong> 是用來檢查服務是否健康的服務</p>\n</blockquote>\n<blockquote>\n<p><strong>Artifact Server</strong> 是用來提供 download artifact 的服務</p>\n</blockquote>\n<blockquote>\n<p><strong>Provisioning</strong> 是指一個服務從無到準備到可上線的過程</p>\n</blockquote>\n<ol>\n<li>Health Check 服務持續檢查 Instance 是否正常，在這裡提到的 Instance 可能是一台 Server，或是機器上的一個預備服務</li>\n<li>由即將負責服務線上的 Instance 發起一個請求從 Artifact Server 取得 Artifact。</li>\n<li>在取得 Artifact 以後做完後續服務部屬的準備</li>\n<li>部屬完成後，Health Check API 會改成回應服務正常</li>\n<li>當服務正常以後，將流量切換到新準備的 Instance</li>\n</ol>\n<p>其中步驟 2 以及步驟 3 通常是從 Instance 中執行一個 Script 來完成的</p>\n<h2>Container 服務的滾動升級</h2>\n<p>如果服務是透過 Container 做部屬的話，<br>\n則可以直接使用準備好的 Image 啟動，<br>\n而不用從 Artifact Server 取得 Artifact，<br>\nProvisioning 的時間就會縮短。<br>\n在新的 Container 在完成準備以後，<br>\n就可以將流量導到新的 Container 服務切換到線上。</p>\n<h2>在雲端上實作服務不下線滾動升級</h2>\n<p>在非雲端服務上要準備額外一組服務來做類似上述<strong>藍綠部屬</strong>的方案不太容易，<br>\n因為機房的伺服器通常是買斷的，<br>\n準備額外的閒置伺服器資源是比較昂貴的。<br>\n但這樣的方案在雲端租用機器的環境上是較容易實現的。<br>\n運用先額外租用一組機器做服務上線準備，<br>\n服務完成準備以後，<br>\n將新的服務切換到線上，\n再將舊的機器還給雲端服務商，<br>\n如果退版也可以將先前服務在線上的機器切回線上繼續服務，<br>\n達成快速退版的目的。</p>\n<h2>AWS EC2 實作服務不下線滾動升級</h2>\n<p>如果用 AWS 來實作的話，<br>\n大致的實作流程如下</p>\n<p><img src=\"/d436f3071aff4c2c10ad50df5a7c8bdb/rolling-update-deploy-ec2.svg\" alt=\"rolling-update-deploy-ec2.svg\"></p>\n<blockquote>\n<p><strong>Auto Scaling Group</strong> 是用來定義可擴展的群組，可定義群組採用相同 <strong>Launch Templete</strong> 產生出新的 <strong>EC2 Instance</strong>，並可以定義對應的 <strong>Scaling Policy</strong> 做機器數量的伸縮。</p>\n</blockquote>\n<blockquote>\n<p><strong>EC2 Instance</strong> 是 AWS 上的機器實例</p>\n</blockquote>\n<blockquote>\n<p><strong>Target Group</strong> 是用來定義一群目標變成一個群組，可以讓 Load Balancer 將流量導入</p>\n</blockquote>\n<ol start=\"0\">\n<li>建立 Auto Scaling Group</li>\n<li>Auto Scaling Group 透過 Launch Templete 產生出新的機器群</li>\n</ol>\n<p>上述是搭配 Auto Scaling Group 的方案，<br>\n如果直接產生出機器的話通常是如下</p>\n<ol>\n<li>透過 Launch Templete 產生出機器</li>\n</ol>\n<p>通常會透過 Launch Templete 產生出機器的原因是可以透過 Launch Templete 定義的 User Data，來執行 Script 做 Provisioning，Script 可能是 PowerShell 或是 ShellScript。</p>\n<p>接下來的動作就是一致的  </p>\n<ol start=\"2\">\n<li>將 EC2 Instance 掛載在新的 Target Group 上</li>\n<li>新的 Target Group 會開始進行 Health Check 檢查</li>\n<li>EC2 Instance 會從 Artifact server 取得 Artifact</li>\n<li>EC2 Instance 開始進行服務上線準備，<br>\n以我所做過的實作，<br>\nScript 會透過機器上的 Tag 來取得一些服務資訊，<br>\n進而從 S3 取得對應的 Script 做後續的服務上線準備。</li>\n<li>新的 Target Group 會持續呼叫指定的 Health Check Endpoint</li>\n<li>如果新的 Target Group 呼叫 Health Check Endpoint 回應成功，則可以將 Load Balancer 換上新的 Target Group，流量就會進到新的 Target Group。</li>\n</ol>\n<h2>AWS ECS 實作服務不下線滾動升級</h2>\n<p>ECS 的實作就簡單許多了，<br>\n省去了 EC2 Instance，<br>\n改成建立新的 Task Definition，<br>\nTask Definition 使用準備好的新 Image，<br>\n再從 Task Definition 建立出新的 Task，<br>\n新的 Task 要指定新的 Target Group，<br>\n並於 Task 準備完成後 Load Balancer 切換新的 Target Group 上線，<br>\n最後刪除舊的 Task。</p>\n<p>大致流程如下</p>\n<p><img src=\"/780fb06ae136bd6fb49e150520e52a12/rolling-update-deploy-ecs.svg\" alt=\"rolling-update-deploy-ecs.svg\"></p>","frontmatter":{"title":"雲端服務滾動升級的一種思路","date":"April 30, 2021","description":"a-way-to-rolling-update-your-service-on-cloud"}}},"pageContext":{"slug":"/a-way-to-rolling-update-your-service-on-cloud/","previous":{"fields":{"slug":"/learn-how-gatsby-query-data-from-graphql/"},"frontmatter":{"title":"透過 GraphQL 在 Gatsby 中做資料撈取"}},"next":{"fields":{"slug":"/logstash-health-check/"},"frontmatter":{"title":"Logstash 的服務健康檢查機制"}}}},"staticQueryHashes":["3000541721","3274528899"]}