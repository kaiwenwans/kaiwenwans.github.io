{"componentChunkName":"component---src-templates-blog-post-js","path":"/learn-gatsbyjs-to-start-blog-project/","result":{"data":{"site":{"siteMetadata":{"title":"kevin wang's blog"}},"markdownRemark":{"id":"8d07a5eb-ac26-5008-a5b0-758f8b101496","excerpt":"本文會提到 一些對使用個人部落格的想法 (個人廢話) 開發環境的前置準備實際執行一輪的筆記 稍微了解 Gatsby.js 如何產生出一頁、模組以及CSS…","html":"<h2>本文會提到</h2>\n<ol>\n<li>一些對使用個人部落格的想法 <del>(個人廢話)</del></li>\n<li>開發環境的前置準備實際執行一輪的筆記</li>\n<li>稍微了解 Gatsby.js 如何產生出一頁、模組以及CSS套用等</li>\n</ol>\n<h2>前言</h2>\n<p>一直以來都有架設一個部落格的想法，<br>\n覺得日常的學習可以被記下來是一件很好的事情，<br>\n但心裡又會覺得似乎不用那麼麻煩 <del>(其實就是懶)</del>，<br>\n上一季因為公司要求績效報告要交學習心得以後，<br>\n開始嘗試紀錄學習心得以後發現，<br>\n有寫下紀錄與只是讀過甚至是自己動手做一輪卻沒有記錄下來的差異是很大的，<br>\n因為在紀錄的過程中會從要講述給別人聽的角度去發現有些地方自己其實無法去解釋，<br>\n所以又會回過頭了解沒有弄懂的地方。<br>\n剛好在這一季的績效報告有要求學習心得一定要以部落格的形式，<br>\n(我是上一季學習筆記寫md放在gist上的懶人..XD)<br>\n也算是加速了我在這一季重新架設出一個部落格。</p>\n<h2>為什麼我用Gatsby.js來架設部落格</h2>\n<p>其實要達成自我學習筆記放在部落格這個條件，<br>\n有很多免費且簡單的方案可以選擇，<br>\n我曾經用blogger寫過文，<br>\n雖然很方便，<br>\n但是寫作體驗上我非常不喜歡，  </p>\n<p>我心中理想的部落格有:</p>\n<ol>\n<li>要可以用MD格式<br>\n(目前沒看過網頁編輯器比直接寫MD好用的)  </li>\n<li>設定到可以寫第一篇文的前置作業的成本不要太高<br>\n(成本包含時間與金錢等)</li>\n<li>方便部落格搬家<br>\n(現成部落格服務搬家通常不容易)</li>\n<li>程式碼高亮</li>\n<li>[加分條件]SEO 支援</li>\n<li>[加分條件]可以用git版控做文章管理</li>\n</ol>\n<p>大部分除 WordPress.com 的部落格服務可以達成  </p>\n<ul>\n<li>[] 要可以用MD格式<br>\n(這應該是不一定有支援)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 設定到可以寫第一篇文的前置作業的成本不要太高</li>\n<li>[] 方便部落格搬家\n(部落格搬家是可以當一門生意的，搬部落格其實很麻煩)</li>\n<li>[] 程式碼高亮<br>\n(這個算是不一定支援，大部分要透過js套件來完成)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> [加分條件]SEO 支援<br>\n(基本上都會支援)</li>\n<li>[] [加分條件]可以用git版控做文章管理</li>\n</ul>\n<p>WordPress.com 的部落格服務可以達成:  </p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 要可以用MD格式</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 設定到可以寫第一篇文的前置作業的成本不要太高</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 方便部落格搬家<br>\n(官方直接支援搬到自架WordPress主機)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 程式碼高亮  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> [加分條件]SEO 支援</li>\n<li>[] [加分條件]可以用git版控做文章管理</li>\n</ul>\n<p>但搬到WordPress自架主機則會變成:  </p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 要可以用MD格式  </li>\n<li>[] 設定到可以寫第一篇文的前置作業的成本不要太高<br>\n(主機設定時間成本以及主機金錢成本等，WP主機維護相關知識對目前的我來說能在工作上沿用的程度不高)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 方便部落格搬家  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 程式碼高亮<br>\n(需安裝套件)  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> [加分條件]SEO 支援  </li>\n<li>[] [加分條件]可以用git版控做文章管理  </li>\n</ul>\n<p>而靜態網頁產生器(Static site generator)可以達成的有:</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 要可以用MD格式  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 設定到可以寫第一篇文的前置作業的成本不要太高<br>\n(github以及md都是現成的，網頁前端技能學習可以直接在網頁開發領域沿用)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 方便部落格搬家<br>\n(都是靜態檔案可遷移性最高)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 程式碼高亮<br>\n(目前看過的都支援)  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> [加分條件]SEO 支援<br>\n(可能需要自己再優化)  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> [加分條件]可以用git版控做文章管理</li>\n</ul>\n<p>SSG看起來很美好，<br>\n但其實這樣會捨棄掉一些東西，\n比方像是:</p>\n<ol>\n<li>點擊計數器</li>\n<li>留言功能</li>\n</ol>\n<p>這部分只能依賴外部服務來達成，<br>\n但目前先不考慮。</p>\n<p>在動手前看了Gatsby.js跟Next.js這兩套以React為基底的框架，<br>\n選擇Gatsby.js的原因還蠻單純的，<br>\n看起來Gatsby.js的plugin生態系比較充足，<br>\n且Next.js現成合適的Starter比較少，<br>\n最後聽見強者我同事說Next.js沒有server site render的話會有些問題，\n就確定以Gatsby.js起手了。</p>\n<hr>\n<h2>前置環境</h2>\n<p>使用 Gatsby 需要以下環境</p>\n<ol>\n<li>Node.js</li>\n<li>Git</li>\n<li>Gatsby cli</li>\n</ol>\n<p>可參考 <a href=\"https://www.gatsbyjs.org/tutorial/part-zero/\">Gatsby 官方網站教學</a></p>\n<p>以下簡單帶過</p>\n<h3>Node.js</h3>\n<p>Gatsby 需要 Node.js環境，<br>\n可以到NodeJs官方網站有安裝的方法，<br>\n或是參考Gatsby 官方網站的教學，<br>\n這裡我使用choco在windows平台上做安裝NodeJs lts版</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">choco install nodejs-lts</code></pre></div>\n<p>安裝完後再terminal下檢查是否正確安裝</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node -v</code></pre></div>\n<p>會顯示類似以下訊息</p>\n<blockquote>\n<p>v12.18.3</p>\n</blockquote>\n<h3>Git</h3>\n<p>如果沒有裝的話，\nGatsby有提供<a href=\"https://www.gatsbyjs.org/tutorial/part-zero/#install-git\">Git安裝教學</a>，<br>\n或是可以參考網路上的其他教學做安裝</p>\n<h3>安裝 gatsby-cli</h3>\n<p><a href=\"https://www.gatsbyjs.org/tutorial/part-zero/#using-the-gatsby-cli\">官方安裝教學</a></p>\n<p>以下是實際操作的簡略紀錄</p>\n<p>執行以下指令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g gatsby-cli</code></pre></div>\n<p>個人不喜歡開啟匿名資料收集(telemetry)，<br>\n所以如果想要關閉的話可以下以下指令關閉</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gatsby telemetry --disable</code></pre></div>\n<p>可以參考 Gatsby 官方網站的<a href=\"https://www.gatsbyjs.org/docs/telemetry/\">說明</a></p>\n<hr>\n<h2>一個簡單的Hello World</h2>\n<p>可參考官方網站的<a href=\"https://www.gatsbyjs.org/tutorial/part-zero/#create-a-gatsby-site\">教學</a>，<br>\n以下是實際操作的簡略紀錄</p>\n<p>在 terminal 下以下指令新增專案</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world</code></pre></div>\n<p><strong>gatsby new</strong> 指令的結構是</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gatsby new <span class=\"token punctuation\">[</span>SITE_DIRECTORY_NAME<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>URL_OF_STARTER_GITHUB_REPO<span class=\"token punctuation\">]</span></code></pre></div>\n<p>在跳到工作目錄以後執行指令就可以將網站以開發模式跑起來，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> hello-world</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gatsby develop</code></pre></div>\n<h3>小插曲</h3>\n<p>在我學習期間，<br>\n線上的hello-world照著跑是無法開啟的，<br>\n會看到以下錯誤:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error: Cannot find module &#39;gatsby-cli/lib/reporter&#39;</code></pre></div>\n<p>這部分只要</p>\n<ol>\n<li>到package.json的Gatsby 從 <strong>2.24.41</strong> > <strong>2.24.42</strong></li>\n<li>刪除 package-lock.json</li>\n<li>\n<p>執行以下指令</p>\n<blockquote>\n<p> npm i gatsby-cli<br>\nnpm install<br>\ngatsby develop  </p>\n</blockquote>\n</li>\n</ol>\n<p>就可以了</p>\n<p>如果照著操作到現在，<br>\n就可以透過 <a href=\"http://localhost:8000/\">localhost:8000</a> 來訪問範例Gatsby網站，<br>\n如果自己產生最小可用的Hello-world的話則需要以下檔案</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── src\n├── gatsby-config.js\n└── package.json</code></pre></div>\n<p>並在工作目錄下執行 <strong>npm install</strong> 後就可以執行 <strong>gatsby develop</strong>並成功啟動Gatsby開發模式</p>\n<hr>\n<h2>Gatsby Page</h2>\n<p>在前面一點的文章中我們按照 Gatsby官方教學跑了一個Hello-World，<br>\n當使用 <strong>gatsby develop</strong> 指令啟動開發伺服器後，<br>\n會開啟Homepage，<br>\n這個檔案在 src/pages/index.js ，<br>\n在 Gatsby 中，<br>\n任何定義在 src/pages/*.js 的 React component會被當成是Gatsby Page，<br>\n舉例像是如果要新增一個about頁的話，<br>\n就要新增 <strong>src/pages/about.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">About</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">green</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>About Kevin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Some introduction<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>page components &#x26; sub components</h2>\n<p>現代網頁比較複雜，<br>\n通常網頁前端開發上也會做模組化，<br>\n如果要增加模組的話要新增 <strong>src/components/*.js</strong><br>\n如果我們新增一個 <strong>src/components/header.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>headerText<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>並將首頁改成</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/header\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Header headerText<span class=\"token operator\">=</span><span class=\"token string\">\"Header from index\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello world<span class=\"token operator\">!</span> aaa<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此時畫面就會顯示</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Header from index\nHello world! aaa</code></pre></div>\n<p>如果要從Home頁跳到About頁的話可以使用</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>About<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在使用時要額外import套件</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span></code></pre></div>\n<h2>增加網站的Style</h2>\n<p>通常來說一個網站都會有一些全站共用樣式，<br>\n在Gatsby中，\n我們需要先建立 <strong>gatsby-browser.js</strong>，<br>\n然後再將 <strong>.css</strong>檔案加在 <strong>gatsby-browser.js</strong>，<br>\n如果要加入全站用的樣式的話，<br>\n可以加入<br>\n<strong>src/styles/global.css</strong>  </p>\n<p>並在 <strong>gatsby-browser.js</strong> 加入</p>\n<p>ES Module syntax </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"./src/styles/global.css\"</span></code></pre></div>\n<p>或是  </p>\n<p>CommonJS syntax </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/styles/global.css'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>*以上的差別是CommonJS可以在node.js環境中執行，ES Module不可以</p>\n<h2>sub components CSS</h2>\n<p>在 <strong>src/components</strong> 加入 以下檔案</p>\n<p><strong>articles-part.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> ArticlesCSS <span class=\"token keyword\">from</span> <span class=\"token string\">\"./articles.module.css\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ArticlesCSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ArticlesPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"articles-part\"</span><span class=\"token operator\">></span>some article<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>articles.module</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.articles-part</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 5%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> aqua<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這時候會發現CSS沒有正確在套用在畫面上，<br>\n原因是在build的時候css會被打包成特定檔案格式，<br>\n實際產生的CSS檔與build出來的CSS檔內容不同，<br>\n從debug console可以發現加載的CSS檔內的CSS樣式是有加上隨機字串的，<br>\n這時候只要參考 <strong>console.log(ArticlesCSS)</strong> 內的物件，\n改成</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> ArticlesCSS <span class=\"token keyword\">from</span> <span class=\"token string\">\"./articles.module.css\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ArticlesCSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ArticlesPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ArticlesCSS<span class=\"token punctuation\">.</span>articlesPart<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>some article<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就能正確套用CSS樣式。</p>\n<p>學習了前置知識以後，  </p>\n<Link to=\"/deploy-gatsby-blog-note/\">下一篇文</Link> 會紀錄架設部落格以及發佈部落格的一些筆記。\n<hr>\n<p>ref:</p>\n<ol>\n<li><a href=\"https://www.gatsbyjs.org/tutorial/\">https://www.gatsbyjs.org/tutorial/</a></li>\n</ol>","frontmatter":{"title":"學習透過Gatsby.js架設部落格","date":"August 17, 2020","description":"study gatsby.js note"}}},"pageContext":{"slug":"/learn-gatsbyjs-to-start-blog-project/","previous":{"fields":{"slug":"/study-dotnet-span-api/"},"frontmatter":{"title":".Net Span<T> API and Memory<T> API Study"}},"next":{"fields":{"slug":"/deploy-gatsby-blog-note/"},"frontmatter":{"title":"佈署Gatsby專案到Github Page"}}}},"staticQueryHashes":["1146911855","3000541721"]}