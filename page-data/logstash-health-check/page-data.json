{"componentChunkName":"component---src-templates-blog-post-js","path":"/logstash-health-check/","result":{"data":{"site":{"siteMetadata":{"title":"kevin wang's blog"}},"markdownRemark":{"id":"6787720c-de64-511d-805e-eebbc9dbf6a7","excerpt":"近期公司的 Kibana 在查詢 Log 的時候總覺得 Log 少了， 後來有一天 OP 人員告知查詢不到 Log 了， 花了一些時間追查才發現 Logstash 服務掛了。 修復完成後也開始計畫建立 Logstash 的 Health Check 機制。 Logstash Health Check API…","html":"<p>近期公司的 Kibana 在查詢 Log 的時候總覺得 Log 少了，<br>\n後來有一天 OP 人員告知查詢不到 Log 了，<br>\n花了一些時間追查才發現 Logstash 服務掛了。<br>\n修復完成後也開始計畫建立 Logstash 的 Health Check 機制。</p>\n<h2>Logstash Health Check API</h2>\n<p>根據官方的<a href=\"https://www.elastic.co/guide/en/logstash/current/monitoring-logstash.html\">文章</a>，  </p>\n<p>透過呼叫</p>\n<blockquote>\n<p><strong>curl -XGET ‘localhost:9600/?pretty’</strong></p>\n</blockquote>\n<p>可以得到類似以下的回應</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"skywalker\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"7.12.1\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"http_address\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1:9600\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>一個良好的監控…</h2>\n<p>一個良好的監控至少要滿足</p>\n<ul>\n<li>監控本身是高 SLA 的，不需要被監控</li>\n<li>監控成本要低</li>\n<li>監控設定要能夠進版控</li>\n<li>監控要容易部屬與維護</li>\n<li>要隨時能知道發生異常</li>\n</ul>\n<p>由於公司的 Logstash 目前是在 AWS 雲端，<br>\n目前公司大部分服務的告緊機制也是使用 Route53 Health Check 服務，<br>\n所以決定先採用 AWS CLI 建立 Route53 Health Check 服務來完成告警機制。\nRoute53 Health Check 本身沒有額外費用，<br>\n只存在 Route53 的費用，<br>\nRoute53 費用可以參考 <a href=\"https://aws.amazon.com/tw/route53/pricing/\">AWS 說明</a>。</p>\n<h2>建立 Route53 HealthCheck</h2>\n<p>透過以下指令可以建立</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws route53 create-health-check --cli-incpu-json &#39;{...}&#39;</code></pre></div>\n<h2>題外話: AWS CLI 的使用技巧</h2>\n<p>一開始在使用 AWS CLI 的時候，<br>\n有些參數會不知道怎麼填寫，<br>\n可以透過 AWS CLI 的 <strong>—generate-cli-skeleton</strong> 參數產生 Json 骨架，<br>\n也可以透過 AWS CLI 的查詢指令來查詢帳號內線上的設定來幫助自己寫出正確的設定。</p>\n<h2>Health Check 沒有通過!?</h2>\n<p>建立完以後，<br>\n發現 Health Check 始終不通過，<br>\n在通過 Health Check 歷程中突然想到，<br>\n應該要將 Route53 Health Check 服務用到的 IP 加進 Security Group。</p>\n<h2>添加 Route53 Health Check Service IP</h2>\n<p>AWS 本身有提供<a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/route-53-ip-addresses.html\">各服務有用到的 IP 服務有用到的 IP </a></p>\n<p>透過以下指令可以建立 Security Group</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws ec2 modify-instance-attribute --cli-input-json &#39;{...}&#39;</code></pre></div>\n<p>再來是建立 Security Group inbound rule</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws ec2 authorize-security-group-ingress --cli-input-json &#39;{...}&#39;</code></pre></div>\n<h2>掛載 Security Group 到 EC2 上</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws ec2 modify-instance-attribute --cli-input-json &#39;{...}&#39;</code></pre></div>\n<h2>加上 Alarm Metric</h2>\n<p>Alarm 是透過參數內的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &quot;Dimensions&quot;: [\n        {\n            &quot;Name&quot;: &quot;HealthCheckId&quot;,\n            &quot;Value&quot;: &quot;{Health Check ID}&quot;\n        }\n    ]</code></pre></div>\n<p>來關聯 Health Check 服務 跟 Alarm 的。</p>\n<p>使用以下指令來建立 Alarm</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws cloudwatch put-metric-alarm --cli-input-json &#39;{...}&#39;</code></pre></div>\n<p>在建立 Alarm 可以考慮建立在不同的區域，<br>\n透過 <strong>—region {別的區域}</strong> 參數就可以達成在指定的區域建立 Alarm。</p>\n<p>Alarm Metric 需要建立 <strong>服務異常</strong> 以及 <strong>服務恢復</strong> 兩種指令。</p>\n<p>做到這裡就建立了一套簡易的 Logstash Health Check 機制。</p>","frontmatter":{"title":"Logstash 的服務健康檢查機制","date":"May 02, 2021","description":"logstash health check"}}},"pageContext":{"slug":"/logstash-health-check/","previous":{"fields":{"slug":"/a-way-to-rolling-update-your-service-on-cloud/"},"frontmatter":{"title":"雲端服務滾動升級的一種思路"}},"next":{"fields":{"slug":"/provision-implement-aws-sample/"},"frontmatter":{"title":"AWS 上的 Provision 實作"}}}},"staticQueryHashes":["3000541721","3274528899"]}