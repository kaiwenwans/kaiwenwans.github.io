{"componentChunkName":"component---src-templates-blog-post-js","path":"/learn-how-gatsby-query-data-from-graphql/","result":{"data":{"site":{"siteMetadata":{"title":"kevin wang's blog"}},"markdownRemark":{"id":"5f668174-96c4-5525-a639-e4ca5620e624","excerpt":"本文會提到 Gatsby 的資料撈取機制 舉例說明 一個實際例子 從 第三方 API 作為資料來源產生畫面 在之前介紹 Gatsby 的文章中， 我跳過了在 Gatsby 中使用 GraphQL， 在近期修改了 Blog 的樣式， 也補齊了一些之前被我跳過的知識， 這篇文章會記錄我學習 Gatsby…","html":"<h2>本文會提到</h2>\n<ol>\n<li>Gatsby 的資料撈取機制</li>\n<li>舉例說明</li>\n<li>一個實際例子</li>\n<li>從 第三方 API 作為資料來源產生畫面</li>\n</ol>\n<hr>\n<p>在之前<a href=\"../learn-gatsbyjs-to-start-blog-project/\">介紹 Gatsby 的文章中</a>，<br>\n我跳過了在 Gatsby 中使用 GraphQL，<br>\n在近期修改了 Blog 的樣式，<br>\n也補齊了一些之前被我跳過的知識，<br>\n這篇文章會記錄我學習 Gatsby 中使用 GraphQL 的一些筆記。  </p>\n<h2>GraphQL 查詢互動介面</h2>\n<p>GraphQL 被整合在 Gatsby 之中作為 Data layer，<br>\n在 Gatsby Project 資料夾下執行 <strong>gatsby develop</strong> 或 <strong>gatsby build</strong> 後可以在</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http://localhost:8000/___graphql</code></pre></div>\n<p>以互動網頁的方式查詢 GraphQL。  </p>\n<h2>從 Gatsby Hello-World Project 起手</h2>\n<p>在 terminal 下以下指令新增專案</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world</code></pre></div>\n<p>從左側點選樹狀或是直接輸入底下查詢</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">query MyQuery {\n  site {\n    siteMetadata {\n      title\n      description\n    }\n  }\n}</code></pre></div>\n<p>會拿到以下結果</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"siteMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個 Query 是站台的 metadata，<br>\n要更改 <strong>gatsby-config.js</strong> 增加設定，<br>\n參考以下程式碼</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  siteMetadata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">some tile</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>    \n    description<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">some description.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* Your site config here */</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>重新 Query 就可以拿到以下結果</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"siteMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"some tile\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"some description.\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果想要在 Gatsby 中使用這組資料，<br>\n則必須使用 <strong>graphql()</strong> 取得。<br>\n參考以下程式碼</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>就可以在畫面上看到剛剛設定的 some title。</p>\n<p>其實傳進來的參數是一個物件，<br>\n所以我們可以改寫成</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面這種 Query 在 Gatsby 被稱為 Page Query。<br>\n其中 <strong>graphql</strong> 是一種 <strong>tag function</strong>，<br>\n這是一種 JavaScript 的函數宣告，<br>\n細節原理可以參考 <a href=\"https://www.gatsbyjs.com/docs/page-query/\">Gatsby 官方網站</a>。</p>\n<p>還有一種查詢方式稱為 <strong>StaticQuery</strong>，<br>\n以上面的範例來修改的話會變成</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticQuery<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>StaticQuery\n      query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        query {\n          site {\n            siteMetadata {\n              title\n              description\n            }\n          }\n        }\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這部分的文件可以參考 <a href=\"https://www.gatsbyjs.com/docs/static-query/\">Gatsby 官方網站</a>。</p>\n<hr>\n<h2>實際應用的例子</h2>\n<p>如果有使用 gatsby blog starter 的話，<br>\n就會知道頁面是放在 <strong>content/blog/</strong> 底下，<br>\n實際上這是透過 <strong>gatsby-source-filesystem</strong> 這個模組定義了檔案的位置，<br>\n再透過 <strong>gatsby-transformer-remark</strong> 這個模組將 MD 檔案編譯成 html。<br>\n但是在 starter 的設計中，<br>\n會無法增加文章以外的頁面。<br>\n這部分要改動的話，<br>\n就要先了解 Gatsby 新增頁面的原理。   </p>\n<h2>Gatsby 是怎麼增加頁面的</h2>\n<p>在 <strong>gatsby-node.js</strong> 中有提供許多建立頁面的 API 讓開發者可以產生出頁面。</p>\n<p><strong>createPages</strong> 這個 API 會負責建立頁面。<br>\n這個 API 會在資料都初始化完成後被呼叫，  </p>\n<p>而在 Gatsby Blog Starter Project 中，<br>\n<strong>createPages</strong> API 會與 GraphQL data layer 交互產生出頁面。</p>\n<p>在 Gatsby Blog Starter Project 中要新增一篇文章，<br>\n必須要在 <strong>content/blog</strong> 資料夾內產生文章的資料夾。<br>\n如果想要增加一頁 <strong>about</strong> 頁的時候，<br>\n我們可以新增一個資料夾來放頁面，<br>\n比方像是 <strong>content/page</strong>，<br>\n並在 <strong>gatsby-config.js</strong> 內使用 <strong>gatsby-source-filesystem</strong> 模組讓 Gatsby 認識 page 資料夾，<br>\n才能在編譯的時候讓 <strong>gatsby-transformer-remark</strong> 編譯到資料夾內的 md 檔。</p>\n<p>參考以下設定</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/content/page`,\n        name: `assets`,\n      },\n    }</code></pre></div>\n<p>設定完且新增完 about 後，<br>\n就可以在新產生的靜態網頁中找到 /about/ 頁，<br>\n但這時候 about 頁也會在部落格文章列表中。  </p>\n<h2>調整 新增頁面 GraphQL 以及查詢文章列表 GraphQL</h2>\n<p>在 Gatsby Blog Starter 的 <strong>gatsby-node.js</strong> 中，<br>\n可以看到 <strong>createPage</strong> 透過 query <strong>allMarkdownRemark</strong> 產生出文章列表的資料來產生文章相關檔案，<br>\n並在 <strong>index.js</strong> 內產生文章列表時透過 query <strong>allMarkdownRemark</strong> 產生文章列表畫面，<br>\n所以要做的調整有  </p>\n<ol>\n<li><strong>index.js</strong> 內的 query 增加 filter，</li>\n<li>新增 about 頁要用的 templete</li>\n<li><strong>gatsby-node.js</strong> 中的 <strong>createPage</strong> 增加<strong>新增 about 頁</strong>的相關邏輯</li>\n<li>預設的 Gatsby Blog Starter 有使用 <strong>gatsby-plugin-feed</strong> 模組，這是一個產生 RSS 的模組，要調整成指定文章的內容才產生 RSS Feed。</li>\n</ol>\n<p>參考以下程式碼</p>\n<h3>query 增加 filter</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> `\n  {\n    allMarkdownRemark(\n      sort: {fields: [frontmatter___date], order: DESC},\n      filter: {fileAbsolutePath: {regex: &quot;/content/blog/&quot;}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`</code></pre></div>\n<p>新增 templete 以及 CreatePage 可以參考 Starter 內現有 <strong>blog-post.js</strong> 產生方式調整。</p>\n<p>參考以下程式碼</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">onCreateBlogPostPage</span><span class=\"token punctuation\">(</span>graphql<span class=\"token punctuation\">,</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token function\">onCreatePagePostPage</span><span class=\"token punctuation\">(</span>graphql<span class=\"token punctuation\">,</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onCreatePagePostPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">graphql<span class=\"token punctuation\">,</span> actions</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pagePostResultTask <span class=\"token operator\">=</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      {\n        allMarkdownRemark(\n          sort: {fields: [frontmatter___date], order: DESC},\n          filter: {fileAbsolutePath: {regex: \"/content/page/\"}}\n        ) {\n          edges {\n            node {\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n              }\n            }\n          }\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pagePostResult</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n\n    <span class=\"token keyword\">const</span> pagePost <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/templates/page-post.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pagePostResult<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> pagePostResult<span class=\"token punctuation\">.</span>errors\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token comment\">// Create page posts pages.</span>\n    <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> pagePostResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges\n  \n    posts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>      \n  \n      <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        path<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> pagePost<span class=\"token punctuation\">,</span>\n        context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          slug<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> pagePostResultTask<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>同場加映-在 Gatsby 中使用 第三方 API 當作來源</h2>\n<p>從上面的範例，<br>\n我們實作了 Gatsby 在 <strong>gatsby-node.js</strong> 透過 GraphQL 語法取得資料在編譯階段產生畫面，<br>\n除了從 Gatsby 專案內取得資料，<br>\n我們也可以從外部 API 取得資料，<br>\n官方做了一個<a href=\"https://www.gatsbyjs.com/blog/2018-10-25-using-gatsby-without-graphql/\">範例</a>舉例如何在編譯階段使用外部 API 產生畫面。<br>\n大致原理是在 <strong>createPage</strong> 時呼叫 Web API，<br>\n如果要使用 GraphQL Server 的資料當成產生畫面來源可以使用 <a href=\"https://www.gatsbyjs.com/plugins/gatsby-source-graphql/\">gatsby-source-graphql</a> 這個官方模組。<br>\n透過這些設計就可以使用 WordPress 等 CMS 的資料當成資料來源在編譯階段產生畫面。</p>\n<h2>在執行階段使用 第三方 API 當作來源</h2>\n<p>從上面資料可以知道 Gatsby 提供以第三方 API 當作來源在編譯階段取得資料後產生畫面。<br>\n如果是要一般使用者看到網頁後(執行階段)才呼叫 API 渲染畫面，<br>\n可以考慮用 React Component 內建的 <strong>componentDidMount()</strong> 搭配 <strong>setState</strong> 來實作。  </p>\n<p>首先新增一個 <strong>time-server.js</strong> 並執行  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node time-server.js  </code></pre></div>\n<p>參考以下程式碼</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n     res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n          <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"time\":\"'</span><span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">'\"}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Node.js web server at port 5000 is running..'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>增加 src/components/timepage.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        items<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:5000/\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                time<span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>time\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>          \n          <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n              error\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">,</span> time <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Error<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TimePage</code></pre></div>\n<p><strong>componentdidmount()</strong> 這個方法會在 DOM 被插到 DOM Tree 後被呼叫，<br>\n文件可以參考 <a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">React 官方網站</a>。</p>\n<p>修改 index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> TimePage <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/timepage\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>TimePage<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TimePage<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>將 Gatsby 跑起來以後畫面上就能出現從 API 取回的最新時間了。</p>\n<p>ref:</p>\n<ol>\n<li><a href=\"https://www.gatsbyjs.com/docs/graphql-concepts/\">https://www.gatsbyjs.com/docs/graphql-concepts/</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/page-query/\">https://www.gatsbyjs.com/docs/page-query/</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/static-query/\">https://www.gatsbyjs.com/docs/static-query/</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/graphql/\">https://www.gatsbyjs.com/docs/graphql/</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/node-apis/\">https://www.gatsbyjs.com/docs/node-apis/</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark\">https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/graphql-reference/\">https://www.gatsbyjs.com/docs/graphql-reference/</a></li>\n<li><a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">https://reactjs.org/docs/react-component.html#componentdidmount</a></li>\n</ol>","frontmatter":{"title":"透過 GraphQL 在 Gatsby 中做資料撈取","date":"October 04, 2020","description":"use GraphQL to query data from Gatsby"}}},"pageContext":{"slug":"/learn-how-gatsby-query-data-from-graphql/","previous":{"fields":{"slug":"/book-digest-a-finance-beginner-book-for-software-develop-2/"},"frontmatter":{"title":"書摘-給工程師的第一本理財書-程式金融交易的 118 個入門關鍵技巧-2"}},"next":null}},"staticQueryHashes":["3000541721","3274528899"]}