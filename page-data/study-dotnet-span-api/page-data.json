{"componentChunkName":"component---src-templates-blog-post-js","path":"/study-dotnet-span-api/","result":{"data":{"site":{"siteMetadata":{"title":"kevin wang's blog"}},"markdownRemark":{"id":"4a7bf65a-38da-573e-ae6c-331139e4a248","excerpt":"Microsoft在2018年一月的MSDN Magazine初步釋出了Span API的相關資訊，\n這組API目前在 System.Memory的MemoryExtensions下 主要可以產生以下四種類別 Span<T> Memory<T> ReadOnlySpan<T> ReadOnlyMomory<T…","html":"<p>Microsoft在2018年一月的MSDN Magazine初步釋出了Span API的相關資訊，\n這組API目前在 System.Memory的MemoryExtensions下</p>\n<p>主要可以產生以下四種類別</p>\n<ol>\n<li>Span&#x3C;T></li>\n<li>Memory&#x3C;T></li>\n<li>ReadOnlySpan&#x3C;T></li>\n<li>ReadOnlyMomory&#x3C;T></li>\n</ol>\n<p>Span&#x3C;T>與 Memory&#x3C;T>是一種對記憶體操作的API，表示一段連續的記憶體。讓開發者可以更安全的操作記憶體。</p>\n<p>Span&#x3C;T>與 Memory&#x3C;T>主要是透過以下API來存取記憶體的一個區段</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public Span&lt;T&gt; Slice(int start);\npublic ReadOnlySpan&lt;T&gt; Slice(int start);\npublic Span&lt;T&gt; Slice(int start, int length);\npublic ReadOnlySpan&lt;T&gt; Slice(int start, int length);\n\npublic Memory&lt;T&gt; Slice(int start);\npublic ReadOnlyMemory&lt;T&gt; Slice(int start);\npublic Memory&lt;T&gt; Slice(int start, int length);\npublic ReadOnlyMemory&lt;T&gt; Slice(int start, int length);</code></pre></div>\n<p>假如是一串字串的話，\n用Span&#x3C;T>與 Memory&#x3C;T>可以直接指定某段記憶體位置而不用直接多放一段字串到字串池</p>\n<p>假如要從Hello World切出or這個字串的時候</p>\n<p>使用String.SubString會變成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">字串池\n---------------------------\n|H|e|l|l|o| |W|o|r|l|d|o|r|\n---------------------------</code></pre></div>\n<p>而使用Span會變成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">字串池\n-----------------------\n|H|e|l|l|o| |W|o|r|l|d|\n-----------------------\n              |   |\n              span1</code></pre></div>\n<h2>以下是對Span API做的一些對比測試</h2>\n<hr>\n<p>常見的字串分割操作</p>\n<h2>String.SubString</h2>\n<h3>使用 String SubString 做一百萬次SubString</h3>\n<p><a href=\"https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/1.NativeSubString/Program.cs\">https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/1.NativeSubString/Program.cs</a></p>\n<p>使用時間:21ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[System.Runtime]\n    % Time in GC since last GC (%)                         4\n    Allocation Rate / 1 sec (B)                            0\n    CPU Usage (%)                                          0\n    Exception Count / 1 sec                                0\n    GC Heap Size (MB)                                      1\n    Gen 0 GC Count / 60 sec                                0\n    Gen 0 Size (B)                                        24\n    Gen 1 GC Count / 60 sec                                0\n    Gen 1 Size (B)                                       288\n    Gen 2 GC Count / 60 sec                                0\n    Gen 2 Size (B)                                   115,216\n    LOH Size (B)                                      19,640\n    Monitor Lock Contention Count / 1 sec                  0\n    Number of Active Timers                                0\n    Number of Assemblies Loaded                            7\n    ThreadPool Completed Work Item Count / 1 sec           1\n    ThreadPool Queue Length                                0\n    ThreadPool Thread Count                                2\n    Working Set (MB)                                      23</code></pre></div>\n<h3>使用ReadOnlySpan&#x3C;char> 做一百萬次Slice</h3>\n<p><a href=\"https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/2.ReadOnlySpanSubString/Program.cs\">https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/2.ReadOnlySpanSubString/Program.cs</a></p>\n<p>使用時間:22ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[System.Runtime]\n    % Time in GC since last GC (%)                         0\n    Allocation Rate / 1 sec (B)                            0\n    CPU Usage (%)                                          0\n    Exception Count / 1 sec                                0\n    GC Heap Size (MB)                                      0\n    Gen 0 GC Count / 60 sec                                0\n    Gen 0 Size (B)                                         0\n    Gen 1 GC Count / 60 sec                                0\n    Gen 1 Size (B)                                         0\n    Gen 2 GC Count / 60 sec                                0\n    Gen 2 Size (B)                                         0\n    LOH Size (B)                                           0\n    Monitor Lock Contention Count / 1 sec                  0\n    Number of Active Timers                                0\n    Number of Assemblies Loaded                            8\n    ThreadPool Completed Work Item Count / 1 sec           0\n    ThreadPool Queue Length                                0\n    ThreadPool Thread Count                                2\n    Working Set (MB)                                      20</code></pre></div>\n<h3>使用ReadOnlyMemory&#x3C;char> 做一百萬次Slice</h3>\n<p><a href=\"https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/3.ReadOnlyMemorySubString/Program.cs\">https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/3.ReadOnlyMemorySubString/Program.cs</a></p>\n<p>使用時間:33ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[System.Runtime]\n    % Time in GC since last GC (%)                         0\n    Allocation Rate / 1 sec (B)                            0\n    CPU Usage (%)                                          0\n    Exception Count / 1 sec                                0\n    GC Heap Size (MB)                                      0\n    Gen 0 GC Count / 60 sec                                0\n    Gen 0 Size (B)                                         0\n    Gen 1 GC Count / 60 sec                                0\n    Gen 1 Size (B)                                         0\n    Gen 2 GC Count / 60 sec                                0\n    Gen 2 Size (B)                                         0\n    LOH Size (B)                                           0\n    Monitor Lock Contention Count / 1 sec                  0\n    Number of Active Timers                                0\n    Number of Assemblies Loaded                            8\n    ThreadPool Completed Work Item Count / 1 sec           0\n    ThreadPool Queue Length                                0\n    ThreadPool Thread Count                                2\n    Working Set (MB)                                      20</code></pre></div>\n<h2>String.Split</h2>\n<h3>使用String 做一百萬次Split</h3>\n<p><a href=\"https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/tree/master/4.NativeSplit\">https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/tree/master/4.NativeSplit</a></p>\n<p>使用時間:177ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[System.Runtime]\n    % Time in GC since last GC (%)                         1\n    Allocation Rate / 1 sec (B)                            0\n    CPU Usage (%)                                          0\n    Exception Count / 1 sec                                0\n    GC Heap Size (MB)                                      2\n    Gen 0 GC Count / 60 sec                                0\n    Gen 0 Size (B)                                        24\n    Gen 1 GC Count / 60 sec                                0\n    Gen 1 Size (B)                                    11,400\n    Gen 2 GC Count / 60 sec                                0\n    Gen 2 Size (B)                                   115,200\n    LOH Size (B)                                      19,640\n    Monitor Lock Contention Count / 1 sec                  0\n    Number of Active Timers                                0\n    Number of Assemblies Loaded                            7\n    ThreadPool Completed Work Item Count / 1 sec           1\n    ThreadPool Queue Length                                0\n    ThreadPool Thread Count                                2\n    Working Set (MB)                                      23</code></pre></div>\n<h3>使用ReadOnlySpan&#x3C;char> 做一百萬次 Split實作</h3>\n<p><a href=\"https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/5.ReadOnlySpanSplit/Program.cs\">https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/5.ReadOnlySpanSplit/Program.cs</a></p>\n<p>使用時間:222ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[System.Runtime]\n    % Time in GC since last GC (%)                         0\n    Allocation Rate / 1 sec (B)                            0\n    CPU Usage (%)                                          0\n    Exception Count / 1 sec                                0\n    GC Heap Size (MB)                                      0\n    Gen 0 GC Count / 60 sec                                0\n    Gen 0 Size (B)                                         0\n    Gen 1 GC Count / 60 sec                                0\n    Gen 1 Size (B)                                         0\n    Gen 2 GC Count / 60 sec                                0\n    Gen 2 Size (B)                                         0\n    LOH Size (B)                                           0\n    Monitor Lock Contention Count / 1 sec                  0\n    Number of Active Timers                                0\n    Number of Assemblies Loaded                            8\n    ThreadPool Completed Work Item Count / 1 sec           0\n    ThreadPool Queue Length                                0\n    ThreadPool Thread Count                                2\n    Working Set (MB)                                      19</code></pre></div>\n<h3>使用ReadOnlyMemory&#x3C;char> 做一百萬次 Split實作</h3>\n<p><a href=\"https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/6.ReadOnlyMemorySplit/Program.cs\">https://github.com/kaiwenwans/dotNetMemoryExtensionPractice/blob/master/6.ReadOnlyMemorySplit/Program.cs</a></p>\n<p>使用時間:224ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[System.Runtime]\n    % Time in GC since last GC (%)                         0\n    Allocation Rate / 1 sec (B)                            0\n    CPU Usage (%)                                          0\n    Exception Count / 1 sec                                0\n    GC Heap Size (MB)                                      0\n    Gen 0 GC Count / 60 sec                                0\n    Gen 0 Size (B)                                         0\n    Gen 1 GC Count / 60 sec                                0\n    Gen 1 Size (B)                                         0\n    Gen 2 GC Count / 60 sec                                0\n    Gen 2 Size (B)                                         0\n    LOH Size (B)                                           0\n    Monitor Lock Contention Count / 1 sec                  0\n    Number of Active Timers                                0\n    Number of Assemblies Loaded                            8\n    ThreadPool Completed Work Item Count / 1 sec           0\n    ThreadPool Queue Length                                0\n    ThreadPool Thread Count                                2\n    Working Set (MB)                                      20</code></pre></div>\n<h2>Span&#x3C;T> 與 Memory&#x3C;T>的一些差異</h2>\n<ol>\n<li>Span&#x3C;T>只能用在同步方法，Memory&#x3C;T>可以用在非同步方法。</li>\n<li>Memory&#x3C;T>可以轉成Span&#x3C;T>，Span&#x3C;T>不能轉成Memory&#x3C;T>。</li>\n<li>Span&#x3C;T>在Stack上，Memory&#x3C;T>在Heap上。</li>\n<li>Span&#x3C;T>不能通過ValueTuple方式回傳，Memory&#x3C;T>可以。</li>\n<li>Span&#x3C;T>不能成為類別的成員，Memory&#x3C;T>可以。</li>\n<li>Span&#x3C;T>不能手動釋放，Memory&#x3C;T>可以透過Pin()方法通知runtime由開發者手動回收。</li>\n<li>Span&#x3C;T>不能作為泛型類型參數，Memory&#x3C;T>可以。</li>\n</ol>\n<p>*造成Span&#x3C;T> 與 Memory&#x3C;T>的一些差異主要都在於Span&#x3C;T>是放在Stack上所產生出的限制，</p>\n<h2>一些可用的原生API</h2>\n<p>目前一些原生API已經支援以Span&#x3C;T> 與 Memory&#x3C;T>當成參數，比方說</p>\n<p>String</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1);</code></pre></div>\n<p>Utf8Formatter</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public static bool TryFormat (int value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = default);</code></pre></div>\n<p>Utf8Parser </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out int value, out int bytesConsumed, char standardFormat = &#39;\\0&#39;);</code></pre></div>\n<p>ref:</p>\n<ol>\n<li><a href=\"https://docs.microsoft.com/zh-tw/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay\">https://docs.microsoft.com/zh-tw/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/dotnet/standard/memory-and-spans/memory-t-usage-guidelines\">https://docs.microsoft.com/zh-tw/dotnet/standard/memory-and-spans/memory-t-usage-guidelines</a></li>\n</ol>","frontmatter":{"title":".Net Span<T> API and Memory<T> API Study","date":"June 27, 2020","description":".Net Span<T> API and Memory<T> API Study"}}},"pageContext":{"slug":"/study-dotnet-span-api/","previous":{"fields":{"slug":"/study-dotnet-memory-management/"},"frontmatter":{"title":".Net 記憶體管理的一些study"}},"next":{"fields":{"slug":"/learn-gatsbyjs-to-start-blog-project/"},"frontmatter":{"title":"學習透過Gatsby.js架設部落格"}}}},"staticQueryHashes":["1146911855","3000541721"]}