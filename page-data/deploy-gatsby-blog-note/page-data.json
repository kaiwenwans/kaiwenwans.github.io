{"componentChunkName":"component---src-templates-blog-post-js","path":"/deploy-gatsby-blog-note/","result":{"data":{"site":{"siteMetadata":{"title":"kevin wang's blog"}},"markdownRemark":{"id":"5234313e-01db-5f93-8a4c-3509dd00c1c3","excerpt":"本文會提到 套用現成 Blog 樣板 部署到 Github-page 透過 travis-ci 自動部署 套用 Blog Starter Gatsby.js 有很多現成的 blog starter， 有些 Starter 真的很不錯， 但我還是決定用官方的 blog-starter…","html":"<h2>本文會提到</h2>\n<ol>\n<li>套用現成 Blog 樣板</li>\n<li>部署到 Github-page</li>\n<li>透過 travis-ci 自動部署</li>\n</ol>\n<h2>套用 Blog Starter</h2>\n<p>Gatsby.js 有很多現成的 blog starter，<br>\n有些 Starter 真的很不錯，<br>\n但我還是決定用官方的 blog-starter 起手，<br>\n再依需求改部落格。  </p>\n<p>一樣從 <strong>gatsby new</strong> 起手</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gatsby new my-blog-starter https://github.com/gatsbyjs/gatsby-starter-blog</code></pre></div>\n<p>首先要調整 <strong>gatsby-config.js</strong> 內的樣版內容，<br>\n如果像我一樣移除掉 twitter 的話，<br>\n照著錯誤訊息將剩餘有引用到的地方一併移除即可，<br>\n要改的檔案分別是</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n└── src\n    ├── bio.js\n    └── seo.js</code></pre></div>\n<p>文章都會放在 <strong>blog</strong> 資料夾，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n└── content\n    └── blog\n        └── 你文章的網址\n            └── index.md</code></pre></div>\n<hr>\n<h2>部署網站</h2>\n<p>gatsb y產生的是靜態網站，<br>\n只需要 host 可以提供靜態網頁瀏覽的功能就可以了，<br>\n我選擇使用 Github Page 來 host 部落格。</p>\n<p>首先專案安裝 <strong>gh-pages</strong> 套件來產生發佈頁</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install gh-pages --save-dev</code></pre></div>\n<p>並新增一個指令<br>\n<strong>package.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby build &amp;&amp; gh-pages -d public -b master\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 Github 也要設定</p>\n<ol>\n<li>Github 上建立一個用來發佈用到的 repo，</li>\n<li>到 setting 設定一個並選擇一個分支作為 source(通常選 master)</li>\n</ol>\n<p>我是多開一個 <strong>develop</strong> 分支來放我的部落格原始碼。</p>\n<p>如果建立的repo是 <strong>{username}.github.io</strong> 這樣的命名規範，<br>\n就可以直接發佈了，<br>\n但如果不是使用 <strong>{username}.github.io</strong> 這樣的命名規範，<br>\n則需要在多增加以下設定  </p>\n<p><strong>package.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">module.exports = <span class=\"token punctuation\">{</span>\n  pathPrefix<span class=\"token operator\">:</span> <span class=\"token string\">\"/reponame\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最後執行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run deploy</code></pre></div>\n<p>這樣我們就可以在 <strong>{username}.github.io</strong> 看到部署好的網站了。</p>\n<hr>\n<h2>gh-page 與 Gatsby 專案 分離</h2>\n<p>按照上述過程已經可以產生出一個靜態網站了，<br>\n但是這樣我們會直接 deploy 在當前repo的 master 分支，<br>\n接下來會實作 blog source 跟 Github page 的 repo拆開。  </p>\n<p>從上述過程我們已經知道其實部署是依靠以下指令。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gatsby build &amp;&amp; gh-pages -d public -b master</code></pre></div>\n<p>其實稍微改一下部署指令就能做到 gh-page 以及實際 Gatsby 專案分離，  </p>\n<p>首先增加一個 <strong>deploy-ghpage.js</strong> 在根目錄</p>\n<p>deploy-ghpage.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ghpages <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gh-pages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nghpages<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    branch<span class=\"token operator\">:</span> <span class=\"token string\">'master'</span><span class=\"token punctuation\">,</span>\n    repo<span class=\"token operator\">:</span> 你預計發佈的repo位置<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Deploy Complete!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接下來跟剛剛一樣在 <strong>package.json</strong>增加一個自訂指令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;deploy:ghpage&quot;: &quot;npm run build &amp;&amp; node ./deploy-ghpage&quot;</code></pre></div>\n<p>最後執行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run deploy:ghpage</code></pre></div>\n<p>就可以部署到gh-page的repo了。</p>\n<hr>\n<h2>CI/CD</h2>\n<p>到目前為止我們只需要在 <strong>content/blog/</strong> 新增 <strong>文章資料夾</strong> 以及 編輯文章主體 <strong>index.md</strong>，  </p>\n<p>開發的時候執行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gatsby develop</code></pre></div>\n<p>發佈的時候執行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run deploy:ghpage</code></pre></div>\n<p>就可以發文章了。</p>\n<p>但這樣每次發佈的時候都要再打一次指令且在寫文章的機器上執行一輪 release，<br>\n如果可以在每次push完後自動做 deploy 發文體驗就會更好。</p>\n<p>在花了一些時間尋找方案以後，<br>\n我決定用 Travis CI 來部署我的部落格。  </p>\n<hr>\n<h2>前置設定</h2>\n<p>首先先要先準備好 Travis CI 的帳號，<br>\n然後參考 <a href=\"https://travis-ci.com/getting_started\">官方教學</a> 連結 travis-ci 與 Github repo，<br>\n也可以到 Travis CI 的 setting 頁選擇你的部落格 repo。  </p>\n<p>參考以下流程</p>\n<ol>\n<li>到 <strong>Setting</strong> 頁  </li>\n<li>點 <strong>Manage repositories on GitHub</strong>  </li>\n<li>在 <strong>Repository access</strong> 區域內的 <strong>Only select repositories</strong> 選擇你的部落格repo  </li>\n<li>點選 Approve and install</li>\n</ol>\n<p>再來要產生 Github token，<br>\n到 Github/Settings/Developer settings 內的 <strong>Personal access tokens</strong> 區塊設定token，<br>\n要記得設定完後要記錄起來，<br>\n因為下次除了重新產生一組token以外沒有辦法看到token了。</p>\n<p>如果是 build public repo 只需要 <strong>public_repo</strong> 權限，<br>\n如果是 build private repo 的話則需要整個 <strong>repo</strong> 權限。<br>\n這部分 Github 官網文件有更詳細的<a href=\"https://docs.github.com/en/developers/apps/scopes-for-oauth-apps\">說明</a>。</p>\n<p>接下來要建立 <strong>.travis.yml</strong> 在 專案根目錄才能讓  Travis CI 知道要執行什麼樣的任務</p>\n<p>參考以下內容</p>\n<p>.travis.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> node_js\n<span class=\"token key atrule\">node_js</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"12\"</span>\n<span class=\"token key atrule\">install</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> npm install\n<span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> gatsby build</code></pre></div>\n<p>由於我在開發機上發佈時的nodejs環境是使用 12，<br>\n在yml檔中也是指定 12。<br>\n完成後可以先 push 一個版本。</p>\n<p>如果沒意外可以在<br>\n<strong><a href=\"https://travis-ci.com/github/%7Busername%7D/%7Brepo\">https://travis-ci.com/github/{username}/{repo</a> name}</strong><br>\n看到 Travis CI 會檢查這一次的 push 有沒有問題。</p>\n<p>接下來到 <a href=\"https://travis-ci.com/github/%7Busername%7D/reponame/settings\">https://travis-ci.com/github/{username}/reponame/settings</a> 設定token，<br>\n要找到 Environment Variables 這個區塊並設定</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Name         |Value           |\nGITHUB_TOKEN |剛剛拿到的token  |</code></pre></div>\n<hr>\n<h2>小插曲 為什麼不直接使用 deploy:ghpage 指令</h2>\n<p>其實我一開始是直接寫 </p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> npm run deploy<span class=\"token punctuation\">:</span>ghpage</code></pre></div>\n<p>Travis CI 也真的跑過了，<br>\n但是我的 Github Page 卻沒有成功被更新，<br>\n思考了一下才想到，<br>\n我根本沒有在 build script 裡面指定 token ，<br>\n這個 deploy 當然不會過，<br>\n加上 build script 沒有顯示錯誤訊息，<br>\n才會導致沒有正確上版。  </p>\n<h2>再次修改.travis.yml</h2>\n<p>設定完 token 也確定 Travis CI 可以完成 build 以後，<br>\n接下來要 push 完整的 <strong>.travis.yml</strong>。<br>\n這裡使用的 travis 的 deploy 指令。  </p>\n<p>參考以下設定</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> node_js\n\n<span class=\"token key atrule\">sudo</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> npm <span class=\"token comment\">#保存npm lib 避免每次 Travis CI build的時候會產生全新環境都要先下載一次所有lib</span>\n\n<span class=\"token key atrule\">node_js</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"12\"</span>\n\n<span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> npm install\n\n<span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> gatsby build\n\n<span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> pages\n  <span class=\"token key atrule\">skip-cleanup</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">github-token</span><span class=\"token punctuation\">:</span> $GITHUB_TOKEN <span class=\"token comment\">#剛剛在Travis CI設定的環境變數</span>\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>user/repo<span class=\"token punctuation\">-</span>name<span class=\"token punctuation\">}</span> <span class=\"token comment\"># 不填寫就是deploy到當前分支</span>\n  <span class=\"token key atrule\">local-dir</span><span class=\"token punctuation\">:</span> public <span class=\"token comment\">#gh-page輸出的是public 資料夾</span>\n  <span class=\"token key atrule\">keep-history</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token comment\"># target_branch: gh-pages #預備發佈的branch 預設是gh-pages</span>\n  <span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\">#source branch</span></code></pre></div>\n<p>**更詳細的設定可以參考 Travis CI官網<a href=\"https://docs.travis-ci.com/user/deployment/pages/\">文件</a></p>\n<p>最後將設定好的 yml 檔 push 到 master 就完成 Travis CI 自動部署了。  </p>\n<p>做完一輪，<br>\n找了一下文件才發現 private repo build <a href=\"https://docs.travis-ci.com/user/travis-ci-for-private/\">有一百次的限制</a>，<br>\n在使用上要注意一下。</p>\n<p>ref: </p>\n<ol>\n<li><a href=\"https://www.gatsbyjs.com/docs/how-gatsby-works-with-github-pages/\">How Gatsby Works with GitHub Pages</a></li>\n<li><a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs/\">Building a JavaScript and Node.js project</a></li>\n<li><a href=\"https://docs.travis-ci.com/user/deployment/pages/\">GitHub Pages Deployment</a></li>\n</ol>","frontmatter":{"title":"部署 Gatsby 專案到 Github Page","date":"August 22, 2020","description":"how I deploy a gatsby.js blog"}}},"pageContext":{"slug":"/deploy-gatsby-blog-note/","previous":{"fields":{"slug":"/learn-gatsbyjs-to-start-blog-project/"},"frontmatter":{"title":"學習透過 Gatsby.js 架設部落格"}},"next":{"fields":{"slug":"/deploy-gatsby-by-github-action/"},"frontmatter":{"title":"透過 GitHub Action 將 Gatsby 部署到 GitHub Page"}}}},"staticQueryHashes":["3000541721","3274528899"]}